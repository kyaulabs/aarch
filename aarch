#!/bin/bash

# $KYAULabs: aarch,v 2.6.6 2023/04/09 03:52:31 kyau Exp $
# ▄▄▄▄ ▄▄▄▄ ▄▄▄▄▄▄▄▄▄ ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
# █ ▄▄ ▄ ▄▄ ▄ ▄▄▄▄ ▄▄ ▄    ▄▄   ▄▄▄▄ ▄▄▄▄  ▄▄▄ ▀
# █ ██ █ ██ █ ██ █ ██ █    ██   ██ █ ██ █ ██▀  █
# ■ ██▄▀ ██▄█ ██▄█ ██ █ ▀▀ ██   ██▄█ ██▄▀ ▀██▄ ■
# █ ██ █ ▄▄ █ ██ █ ██ █    ██▄▄ ██ █ ██ █  ▄██ █
# ▄ ▀▀ ▀ ▀▀▀▀ ▀▀ ▀ ▀▀▀▀    ▀▀▀▀ ▀▀ ▀ ▀▀▀▀ ▀▀▀  █
# ▀▀▀▀▀▀▀▀▀▀▀▀▀▀ ▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀ ▀▀▀▀▀▀▀▀▀▀▀▀▀
#
# Automated Arch Linux (KYAU Labs Edition)
# Copyright (C) 2023 KYAU Labs (https://kyaulabs.com)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

set -u
IFS=$'\n\t'

# Default Functions {{{
function print_logo() {
	printf "  [0;1;30m▄▄▄▄ ▄▄▄▄ ▄▄▄▄▄▄▄▄▄ ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄[0m▄▄▄[1m▄▄\\n"
	printf "  [30m█ [36m▄▄ ▄ ▄▄ ▄ ▄▄▄▄ ▄▄ ▄    [37m▄▄   ▄▄▄▄ ▄▄▄▄  ▄▄▄ [47m▀[40m\\n"
	printf "  [30m█ [36m██ █ ██ █ ██ █ ██ █    [37m██   ██ █ ██ █ ██▀  [30m█\\n"
	printf "  ■ [36m██▄▀ ██▄█ ██▄█ ██ █ [31;41m▀▀[1C[37;40m██   ██▄█ ██▄▀ ▀██▄ [30m■\\n"
	printf "  █ [46m [36;40m█ █ [0;36m▄[1m▄ █ [46m [40m█ █ [46m [40m█ █    [47m [37m█[40m▄▄ [47m [40m█ █ [47m [40m█ █  [0m▄[1m██ [30m█\\n"
	printf "  [37;47m▄[1C[0;36m▀▀ ▀ ▀▀▀▀ ▀▀ ▀ ▀▀▀▀    [37m▀▀▀▀ ▀▀ ▀ ▀▀▀▀ ▀▀▀  [1;30m█\\n"
	printf "  [37m▀▀[0m▀▀▀[1;30m▀▀▀▀▀▀▀▀▀ ▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀ ▀▀▀▀▀▀▀▀▀▀▀▀▀[0m\\n\\n"
	printf "  Automated \e[1;37mArch \e[0;36mLinux\\n"
	printf "  \e[0;38;5;8m- KYAU Labs Edition\\n\\n"
}
function desc() {
	>&2 printf "\\x1b[0;36m\\u25ab\\x1b[1;36m\\u25aa \\x1b[1;37m%s\\x1b[0m" "${1}"
}
function validate() {
	# if failure else success
	if [[ "$1" -ne 0 ]]; then
		>&2 printf "\\n \\x1b[31mx\\x1b[0m %s\\n\\n" "${_AA_CMD}"
		if [[ -z ${2+x} ]]; then
			exit 1
		fi
	else
		>&2 printf " \\x1b[1;32m\\u221a\\x1b[0m"
	fi
}
# }}}
# MODULI Verification {{{
if [ ! -f moduli ]; then
	print_logo
	printf "  \\x1b[38;5;124m‼ Missing non elliptic-curve primes (moduli)\\n\\n\\x1b[0m  Run the following command to generate:\\n"
	printf "  \\x1b[38;5;235m#\\x1b[38;5;244m ssh-keygen -G mtmp -b 2048 && ssh-keygen -T moduli -f mtmp && rm mtmp\\n\\n"
	exit 1
fi
# }}}
# Variables: Load/Prompt {{{
# Load Machine Template
for file in *.aa; do
	if [ -f "$file" ]; then
		# shellcheck disable=SC1090,SC1091
		source "$file"
		break
	fi
done
# Machine Role
if [ -z ${AA_MACHINEROLE+x} ]; then
	printf "Machine Role (dekstop/laptop/server/vm) [default: vm]: "
	read -r AA_MACHINEROLE
	if [ -z "$AA_MACHINEROLE" ]; then
		AA_MACHINEROLE="vm"
	fi
fi
# Machine Type
if [ -z ${AA_MACHINETYPE+x} ]; then
	printf "Machine Type (mbr/uefi) [default: uefi]: "
	read -r AA_MACHINETYPE
	if [ -z "$AA_MACHINETYPE" ]; then
		AA_MACHINETYPE="uefi"
	fi
fi
# Full Disk Encryption
if [ -z ${AA_ENCRYPT+x} ]; then
	printf "Full Disk Encryption (0/1) [default: 0]: "
	read -r AA_ENCRYPT
	if [ -z "$AA_ENCRYPT" ]; then
		AA_ENCRYPT=0
	fi
fi
# Xorg
if [ -z ${AA_XORG+x} ]; then
	printf "Xorg (0-2) [default: 0]: "
	read -r AA_XORG
	if [ -z "$AA_XORG" ]; then
		AA_XORG=0
	fi
fi
# Installation Disk
if [ -z ${AA_DISK+x} ]; then
	printf "Disk to use for install [default: /dev/sda]: "
	read -r AA_DISK
	if [ -z "$AA_DISK" ]; then
		AA_DISK="/dev/sda"
	fi
fi
# Hostname
if [ -z ${AA_HOSTNAME+x} ]; then
	printf "Hostname [default: arch.local]: "
	read -r AA_HOSTNAME
	if [ -z "$AA_HOSTNAME" ]; then
		AA_HOSTNAME="arch.local"
	fi
	AA_HOST=${AA_HOSTNAME%%.*}
else
	AA_HOST=${AA_HOSTNAME%%.*}
fi
# Timezone
if [ -z ${AA_TZ+x} ]; then
	printf "Timezone [default: America/Los_Angeles]: "
	read -r AA_TZ
	if [ -z "$AA_TZ" ]; then
		AA_TZ="America/Los_Angeles"
	fi
fi
# Swap
if [ -z ${AA_SWAP+x} ]; then
	printf "Swap Size (in GB) [default: 4]: "
	read -r AA_SWAP
	if [ -z "$AA_SWAP" ]; then
		AA_SWAP="4"
	fi
fi
# Username
if [ -z ${AA_USERNAME+x} ]; then
	printf "Username [default: kyau]: "
	read -r AA_USERNAME
	if [ -z "$AA_USERNAME" ]; then
		AA_USERNAME="kyau"
	fi
fi
# Root Password
if [ -z ${AA_PASSWD+x} ]; then
	printf "Root/User password [default: moo]: "
	read -r AA_PASSWD
	if [ -z "$AA_PASSWD" ]; then
		AA_PASSWD="moo"
	fi
fi
# SSID
if [ -z ${AA_WIFI_SSID+x} ]; then
	printf "WiFi SSID [default: SSID]: "
	read -r AA_WIFI_SSID
	if [ -z "$AA_WIFI_SSID" ]; then
		AA_WIFI_SSID="SSID"
	fi
fi
# WiFi Password
if [ -z ${AA_WIFI_PASSWD+x} ]; then
	printf "WiFi password [default: moo]: "
	read -r AA_WIFI_PASSWD
	if [ -z "$AA_WIFI_PASSWD" ]; then
		AA_WIFI_PASSWD="moo"
	fi
fi
# IP Address
if [ -z ${AA_IPADDR+x} ]; then
	printf "IP Address (DHCP if Blank): "
	read -r AA_IPADDR
fi
if [ -n "$AA_IPADDR" ]; then
	# Gateway
	if [ -z ${AA_GATEWAY+x} ]; then
		printf "Gateway [default: 10.0.42.1]: "
		read -r AA_GATEWAY
		if [ -z "$AA_GATEWAY" ]; then
			AA_GATEWAY="10.0.42.1"
		fi
	fi
	# DNS
	if [ -z ${AA_DNS+x} ]; then
		printf "DNS [default: 1.1.1.1]: "
		read -r AA_DNS
		if [ -z "$AA_DNS" ]; then
			AA_DNS="1.1.1.1"
		fi
	fi
fi
# SSH Key
if [ -z ${AA_SSH_KEY+x} ]; then
	printf "SSH Key [default: https://raw.githubusercontent.com/kyau/dotfiles/master/ssh/authorized_keys]: "
	read -r AA_SSH_KEY
	if [ -z "$AA_SSH_KEY" ]; then
		AA_SSH_KEY="https://raw.githubusercontent.com/kyau/dotfiles/master/ssh/authorized_keys"
	fi
fi
# Set Hidden Variables
if [ "${AA_MACHINEROLE^^}" = "VM" ]; then
	AA_UCODE=""
fi
if [ -z "${AA_PKGMAN}" ]; then
	AA_PKGMAN="pikaur"
fi
# }}}
# Variables: Summary {{{
print_logo
p_sshkey=${AA_SSH_KEY##*/}
s_passwd=""
if [ -n "${AA_WIFI_PASSWD}" ]; then
	s_passwd=$(head -c ${#AA_WIFI_PASSWD} < /dev/zero | tr '\0' '*')
fi
p_passwd=$(head -c ${#AA_PASSWD} < /dev/zero | tr '\0' '*')
if [ -n "${AA_TLP_CONFIG}" ]; then
	p_tlp=${AA_TLP_CONFIG##*/}
fi
if [ -n "${AA_TFAN_CONFIG}" ]; then
	p_tfan=${AA_TFAN_CONFIG##*/}
fi
printf " \\x1b[38;5;255m┌\\x1b[38;5;242m────\\x1b[38;5;235m─·\\x1b[38;5;242m─\x1b[38;5;235m─·─────────────────────────────────────────────────┐\\n"
printf " \\x1b[38;5;242m│\\x1b[38;5;237m░\\x1b[0m   \\x1b[38;5;244mDisk: \\x1b[38;5;240m%-10s  \\x1b[38;5;244mSwap: \\x1b[38;5;240m%-2sGB %-21s \\x1b[38;5;237m░░░·\\x1b[0m\\n" "${AA_DISK}" "${AA_SWAP}" " "
printf " \\x1b[38;5;242m│\\x1b[38;5;237m░\\x1b[0m   \\x1b[38;5;244mHost: \\x1b[38;5;240m%-10s  \\x1b[38;5;244mHostname: \\x1b[38;5;240m%-24s\\x1b[0m \\x1b[38;5;237m░\\x1b[38;5;242m:\\x1b[0m\\n" "${AA_HOST}" "${AA_HOSTNAME}"
printf " \\x1b[38;5;242m│\\x1b[38;5;237m░\\x1b[0m   \\x1b[38;5;244mUsername: \\x1b[38;5;240m%-42s \\x1b[38;5;237m░\\x1b[38;5;242m│\\x1b[0m\\n" "${AA_USERNAME}"
printf " \\x1b[38;5;242m│\\x1b[38;5;237m░\\x1b[0m   \\x1b[38;5;244mPassword: \\x1b[38;5;240m%-42s \\x1b[38;5;237m░\\x1b[38;5;242m│\\x1b[0m\\n" "${p_passwd}"
printf " \\x1b[38;5;242m│\\x1b[38;5;237m░\\x1b[0m   \\x1b[38;5;244mMachine Role: \\x1b[38;5;240m%-38s \\x1b[38;5;237m░\\x1b[38;5;242m│\\x1b[0m\\n" "${AA_MACHINEROLE^^}"
printf " \\x1b[38;5;242m│\\x1b[38;5;237m░\\x1b[0m   \\x1b[38;5;244mMachine Type: \\x1b[38;5;240m%-38s \\x1b[38;5;237m░\\x1b[38;5;242m│\\x1b[0m\\n" "${AA_MACHINETYPE^^}"
if [ -n "${AA_WIFI_SSID}" ]; then
	printf " \\x1b[38;5;242m│\\x1b[38;5;237m░\\x1b[0m   \\x1b[38;5;244mWiFi SSID: \\x1b[38;5;240m%-16s \\x1b[38;5;244mPassword: \\x1b[38;5;240m%-14s \\x1b[38;5;237m░\\x1b[38;5;242m│\\x1b[0m\\n" "${AA_WIFI_SSID}" "${s_passwd}"
fi
if [ -n "${AA_IPADDR}" ]; then
	printf " \\x1b[38;5;242m│\\x1b[38;5;237m░\\x1b[0m   \\x1b[38;5;244mIP Address: \\x1b[38;5;240m%-15s \\x1b[38;5;244mGateway: \\x1b[38;5;240m%-15s \\x1b[38;5;237m░\\x1b[38;5;242m│\\x1b[0m\\n" "${AA_IPADDR}" "${AA_GATEWAY}"
else
	printf " \\x1b[38;5;242m│\\x1b[38;5;237m░\\x1b[0m   \\x1b[38;5;244mIP Address: \\x1b[38;5;240m%-15s \\x1b[38;5;244mGateway: \\x1b[38;5;240m%-15s \\x1b[38;5;237m░\\x1b[38;5;242m│\\x1b[0m\\n" "DHCP" "auto"
fi
TXT_DNS="auto"
if [ -n "${AA_DNS}" ]; then
	TXT_DNS=${AA_DNS}
fi
printf " \\x1b[38;5;242m│\\x1b[38;5;237m░\\x1b[0m   \\x1b[38;5;244mDNS: \\x1b[38;5;240m%-47s \\x1b[38;5;237m░\\x1b[38;5;242m│\\x1b[0m\\n" "${TXT_DNS}"
printf " \\x1b[38;5;242m│\\x1b[38;5;237m░\\x1b[0m   \\x1b[38;5;244mTimezone: \\x1b[38;5;240m%-42s \\x1b[38;5;237m░\\x1b[38;5;242m│\\x1b[0m\\n" "${AA_TZ}"
if [ -n "${AA_TFAN_CONFIG}" ]; then
	printf " \\x1b[38;5;242m│\\x1b[38;5;237m░\\x1b[0m   \\x1b[38;5;244mThinkfan Config: \\x1b[38;5;240m%-35s \\x1b[38;5;237m░\\x1b[38;5;242m│\\x1b[0m\\n" "${p_tfan}"
fi
if [ -n "${AA_TLP_CONFIG}" ]; then
	printf " \\x1b[38;5;235m·\\x1b[38;5;237m░\\x1b[0m   \\x1b[38;5;244mTLP Config: \\x1b[38;5;240m%-40s \\x1b[38;5;237m░\\x1b[38;5;242m│\\x1b[0m\\n" "${p_tlp}"
fi
printf " \\x1b[38;5;235m│\\x1b[38;5;237m░░░ \\x1b[38;5;244mSSH Key: \\x1b[38;5;240m%-43s \\x1b[38;5;237m░\\x1b[38;5;242m│\\x1b[0m\\n" "${p_sshkey}"
printf " \\x1b[38;5;235m└─────────────────────────────────────────────·─\\x1b[38;5;242m─\\x1b[1;39m·─\\x1b[38;5;242m─\\x1b[1;39m─\\x1b[38;5;242m──────\\x1b[38;5;255m┘\\x1b[0m\\n"
# }}}
# Prereq: Internet Status {{{
echo -e
desc "Internet Status"
_AA_CMD="Internet Check"
/usr/bin/wget -q --tries=10 --timeout=20 --spider http://www.archlinux.org >/dev/null 2>&1
validate "$?"

printf "\\n"
# }}}
# Prereq: Disk Partition {{{
desc "Prereq: [0mDisk Partition"
if /usr/bin/mount | /usr/bin/grep /mnt > /dev/null; then
	_AA_CMD="${AA_DISK}: Unmount All"
	/usr/bin/umount -R /mnt >/dev/null 2>&1
	validate "$?"
fi

_AA_CMD="${AA_DISK}: Erase (block-level wipe)"
/usr/bin/dd if=/dev/zero of=${AA_DISK} bs=1k count=2048 >/dev/null 2>&1
validate "$?"

_AA_CMD="${AA_DISK}: Erase (filesystem signature)"
/usr/bin/wipefs -af "${AA_DISK}" >/dev/null 2>&1
validate "$?"

if [ "${AA_MACHINETYPE^^}" = "UEFI" ]; then
	_AA_CMD="${AA_DISK}: Erase (MBR/GPT data structs)"
	/usr/bin/sgdisk -Z -o ${AA_DISK} >/dev/null 2>&1
	validate "$?"
fi

_AA_CMD="${AA_DISK}: Partition"
if [ "${AA_ENCRYPT}" -eq "1" ]; then
	if [ "${AA_MACHINEROLE^^}" = "LAPTOP" ]; then
		/usr/bin/sgdisk -n 1:0:256M -n 2:0:+50G -n 3:0:+50G -n 4:0:-0 -t 1:ef00 -t 2:8e00 -t 3:0700 -t 4:8e00 ${AA_DISK} >/dev/null 2>&1
	else
		/usr/bin/sgdisk -n 1:0:256M -n 2:0:-0 -t 1:ef00 -t 2:8e00 ${AA_DISK} >/dev/null 2>&1
	fi
else
	if [ "${AA_MACHINETYPE^^}" = "UEFI" ]; then
		/usr/bin/sgdisk -n 1:0:256M -n 2:0:-0 -t 1:ef00 -t 2:8e00 ${AA_DISK} >/dev/null 2>&1
	else
		echo -e "n\np\n\n\n+256M\nn\np\n\n\n\nt\n2\n8e\na\n1\nw\n" | /usr/bin/fdisk ${AA_DISK} >/dev/null 2>&1
	fi
fi
validate "$?"

if [ "${AA_MACHINETYPE^^}" = "UEFI" ]; then
	_AA_CMD="${AA_DISK}: Labels"
	if [ "${AA_MACHINEROLE^^}" = "LAPTOP" ]; then
		/usr/bin/sgdisk -c 1:"uefi" -c 2:"arch" -c 3:"win10" -c 4:"kali" ${AA_DISK} >/dev/null 2>&1
	else
		/usr/bin/sgdisk -c 1:"uefi" -c 2:"arch" ${AA_DISK} >/dev/null 2>&1
	fi
	validate "$?"
fi
# }}}
# Prereq: LUKS2 {{{
AA_DISKO="${AA_DISK}"
LASTCHAR="${AA_DISK: -1}"
re='^[0-9]+$'
if [[ $LASTCHAR =~ $re ]] ; then
   AA_DISK="${AA_DISK}p"	# modify variable if it ends in a number
fi

if [ "${AA_ENCRYPT}" -eq "1" ]; then
	printf "\\n"
	desc "Prereq: [0mLUKS2"
	_AA_CMD="LUKS2: Clear Metadata"
	/usr/bin/dmsetup remove_all >/dev/null 2>&1
	/usr/bin/pvremove -y -ff ${AA_DISK}* >/dev/null 2>&1
	validate "$?"

	_AA_CMD="LUKS2: Encrypting Partition ${AA_DISK}2"
	printf "\n\x1b[38;5;6m ≡ WARNING:\x1b[0m encryption password will be needed at every boot\n"
	/usr/bin/cryptsetup --type luks2 -q -c aes-xts-plain64 -l 512 -h sha512 --pbkdf argon2i --pbkdf-force-iterations 4 --pbkdf-memory 1048576 --pbkdf-parallel 1 --label archlinux --subsystem "" --use-random luksFormat ${AA_DISK}2
	validate "$?"

	_AA_CMD="LUKS2: Decrypting Partition ${AA_DISK}2"
	printf "\n"
	/usr/bin/cryptsetup open --type luks2 ${AA_DISK}2 cryptlvm
	validate "$?"
else
	_AA_CMD="LVM: Clear Metadata"
	/usr/bin/pvremove -y -ff ${AA_DISK}* >/dev/null 2>&1
	/usr/bin/dmsetup remove_all >/dev/null 2>&1
	validate "$?"
fi

printf "\\n"
# }}}
# Prereq: LVM {{{
desc "Prereq: [0mLVM"
_AA_CMD="LVM: Initialize Physical Volume"
if [ "${AA_ENCRYPT}" -eq "1" ]; then
	/usr/bin/pvcreate --yes -ff /dev/mapper/cryptlvm >/dev/null 2>&1
else
	/usr/bin/pvcreate --yes -ff ${AA_DISK}2 >/dev/null 2>&1
fi
validate "$?"

_AA_CMD="LVM: Create Volume Group"
if [ "${AA_ENCRYPT}" -eq "1" ]; then
	/usr/bin/vgcreate --yes ${AA_HOST} /dev/mapper/cryptlvm >/dev/null 2>&1
else
	/usr/bin/vgcreate --yes ${AA_HOST} ${AA_DISK}2 >/dev/null 2>&1
fi
validate "$?"

if [ "${AA_SWAP}" -ne "0" ]; then
	_AA_CMD="LVM: Create Logical Volume (${AA_HOST}-swap)"
	/usr/bin/lvcreate --yes -L ${AA_SWAP}G ${AA_HOST} --name swap >/dev/null 2>&1
	validate "$?"
fi

_AA_CMD="LVM: Create Logical Volume (${AA_HOST}-root)"
/usr/bin/lvcreate --yes -L 512M ${AA_HOST} --name root >/dev/null 2>&1
validate "$?"

_AA_CMD="LVM: Create Logical Volume (${AA_HOST}-usr)"
if [ "${AA_MACHINEROLE^^}" = "SERVER" ] || [ "${AA_MACHINEROLE^^}" = "VM" ]; then
	/usr/bin/lvcreate --yes -L 5G ${AA_HOST} --name usr >/dev/null 2>&1
else
	/usr/bin/lvcreate --yes -L 8G ${AA_HOST} --name usr >/dev/null 2>&1
fi
validate "$?"

_AA_CMD="LVM: Create Logical Volume (${AA_HOST}-var)"
/usr/bin/lvcreate --yes -L 512M ${AA_HOST} --name var >/dev/null 2>&1
validate "$?"

_AA_CMD="LVM: Create Logical Volume (${AA_HOST}-var_cache)"
if [ "${AA_MACHINEROLE^^}" = "VM" ]; then
	/usr/bin/lvcreate --yes -L 1G ${AA_HOST} --name var_cache >/dev/null 2>&1
else
	/usr/bin/lvcreate --yes -L 2G ${AA_HOST} --name var_cache >/dev/null 2>&1
fi
validate "$?"

_AA_CMD="LVM: Create Logical Volume (${AA_HOST}-var_log)"
/usr/bin/lvcreate --yes -L 512M ${AA_HOST} --name var_log >/dev/null 2>&1
validate "$?"

_AA_CMD="LVM: Create Logical Volume (${AA_HOST}-var_log_audit)"
/usr/bin/lvcreate --yes -L 512M ${AA_HOST} --name var_log_audit >/dev/null 2>&1
validate "$?"

if [ "${AA_MACHINEROLE^^}" = "SERVER" ] || [ "${AA_MACHINEROLE^^}" = "VM" ]; then
	_AA_CMD="LVM: Create Logical Volume (${AA_HOST}-home)"
	/usr/bin/lvcreate --yes -L 1G ${AA_HOST} --name home >/dev/null 2>&1
	validate "$?"

	_AA_CMD="LVM: Create Logical Volume (${AA_HOST}-srv)"
	/usr/bin/lvcreate --yes -l +100%FREE ${AA_HOST} --name srv >/dev/null 2>&1
	validate "$?"
else
	_AA_CMD="LVM: Create Logical Volume (${AA_HOST}-home)"
	/usr/bin/lvcreate --yes -l +100%FREE ${AA_HOST} --name home >/dev/null 2>&1
	validate "$?"
fi

printf "\\n"
# }}}
# Prereq: Filesystems {{{
desc "Prereq: [0mFilesystems"
_AA_CMD="Format: Ext4 (${AA_HOST}-root)"
/usr/bin/mkfs.ext4 -O metadata_csum /dev/${AA_HOST}/root >/dev/null 2>&1
validate "$?"

_AA_CMD="Format: Ext4 (${AA_HOST}-usr)"
/usr/bin/mkfs.ext4 -O metadata_csum /dev/${AA_HOST}/usr >/dev/null 2>&1
validate "$?"

_AA_CMD="Format: Ext4 (${AA_HOST}-var)"
/usr/bin/mkfs.ext4 -O metadata_csum /dev/${AA_HOST}/var >/dev/null 2>&1
validate "$?"

_AA_CMD="Format: Ext4 (${AA_HOST}-var_cache)"
/usr/bin/mkfs.ext4 -O metadata_csum /dev/${AA_HOST}/var_cache >/dev/null 2>&1
validate "$?"

_AA_CMD="Format: Ext4 (${AA_HOST}-var_log)"
/usr/bin/mkfs.ext4 -O metadata_csum /dev/${AA_HOST}/var_log >/dev/null 2>&1
validate "$?"

_AA_CMD="Format: Ext4 (${AA_HOST}-var_log_audit)"
/usr/bin/mkfs.ext4 -O metadata_csum /dev/${AA_HOST}/var_log_audit >/dev/null 2>&1
validate "$?"

_AA_CMD="Format: Ext4 (${AA_HOST}-home)"
/usr/bin/mkfs.ext4 -O metadata_csum /dev/${AA_HOST}/home >/dev/null 2>&1
validate "$?"

if [ "${AA_MACHINEROLE^^}" = "SERVER" ] || [ "${AA_MACHINEROLE^^}" = "VM" ]; then
	_AA_CMD="Format: Ext4 (${AA_HOST}-srv)"
	/usr/bin/mkfs.ext4 -O metadata_csum /dev/${AA_HOST}/srv >/dev/null 2>&1
	validate "$?"
fi

if [ "${AA_MACHINETYPE^^}" = "UEFI" ]; then
	_AA_CMD="Format: FAT32 (${AA_DISK}1)"
	/usr/bin/mkfs.fat -F32 ${AA_DISK}1 >/dev/null 2>&1
	validate "$?"
else
	_AA_CMD="Format: Ext4 (${AA_DISK}1)"
	/usr/bin/mkfs.ext4 -O metadata_csum ${AA_DISK}1 >/dev/null 2>&1
	validate "$?"
fi

if [ "${AA_SWAP}" -ne "0" ]; then
	_AA_CMD="Swap: Create"
	/usr/bin/mkswap /dev/${AA_HOST}/swap >/dev/null 2>&1
	validate "$?"

	_AA_CMD="Swap: Enable"
	/usr/bin/swapon /dev/${AA_HOST}/swap >/dev/null 2>&1
	validate "$?"
fi

_AA_CMD="Mount: ${AA_HOST}-root => /mnt"
/usr/bin/mount -o defaults,noatime,journal_checksum /dev/${AA_HOST}/root /mnt >/dev/null 2>&1
validate "$?"

_AA_CMD="Create Directory Structure"
_ADD_DIR=""
if [ "${AA_MACHINEROLE^^}" = "SERVER" ] || [ "${AA_MACHINEROLE^^}" = "VM" ]; then
	_ADD_DIR="/mnt/srv"
fi
/usr/bin/mkdir -p /mnt/boot /mnt/home /mnt/usr /mnt/var ${_ADD_DIR} >/dev/null 2>&1
validate "$?"

if [ "${AA_MACHINETYPE^^}" = "UEFI" ]; then
	_AA_CMD="Mount: UEFI => /mnt/boot"
	/usr/bin/mount ${AA_DISK}1 /mnt/boot >/dev/null 2>&1
	validate "$?"
else
	_AA_CMD="Mount: ${AA_DISK}2 => /mnt/boot"
	/usr/bin/mount ${AA_DISK}1 /mnt/boot >/dev/null 2>&1
	validate "$?"
fi

_AA_CMD="Mount: ${AA_HOST}-home => /mnt/home"
/usr/bin/mount -o defaults,noatime,nodev,nosuid,journal_checksum /dev/${AA_HOST}/home /mnt/home >/dev/null 2>&1
validate "$?"

_AA_CMD="Mount: ${AA_HOST}-usr => /mnt/usr"
/usr/bin/mount -o defaults,noatime,journal_checksum /dev/${AA_HOST}/usr /mnt/usr >/dev/null 2>&1
validate "$?"

_AA_CMD="Mount: ${AA_HOST}-var => /mnt/var"
/usr/bin/mount -o defaults,noatime,nosuid,journal_checksum /dev/${AA_HOST}/var /mnt/var >/dev/null 2>&1
validate "$?"

_AA_CMD="Create Directory Structure: /var"
/usr/bin/mkdir -p /mnt/var/cache /mnt/var/log >/dev/null 2>&1
validate "$?"

_AA_CMD="Mount: ${AA_HOST}-var_cache => /mnt/var/cache"
/usr/bin/mount -o defaults,noatime,nodev,nosuid,journal_checksum /dev/${AA_HOST}/var_cache /mnt/var/cache >/dev/null 2>&1
validate "$?"

_AA_CMD="Mount: ${AA_HOST}-var_log => /mnt/var/log"
/usr/bin/mount -o defaults,noatime,nodev,noexec,nosuid,journal_checksum /dev/${AA_HOST}/var_log /mnt/var/log >/dev/null 2>&1
validate "$?"

_AA_CMD="Mount: ${AA_HOST}-var_log_audit => /mnt/var/log/audit"
/usr/bin/mkdir -p /mnt/var/log/audit >/dev/null 2>&1
/usr/bin/mount -o defaults,noatime,nodev,noexec,nosuid,journal_checksum /dev/${AA_HOST}/var_log_audit /mnt/var/log/audit >/dev/null 2>&1
validate "$?"

if [ "${AA_MACHINEROLE^^}" = "SERVER" ] || [ "${AA_MACHINEROLE^^}" = "VM" ]; then
	_AA_CMD="Mount: ${AA_HOST}-srv => /mnt/srv"
	/usr/bin/mount -o defaults,noatime,nodev,nosuid,journal_checksum /dev/${AA_HOST}/srv /mnt/srv >/dev/null 2>&1
	validate "$?"
fi

printf "\\n"
# }}}
# Installation {{{
desc "Installation"
# packages to remove after installation
_PACSTRAP_REMOVE=(linux pyalpm)
_PACSTRAP=(base base-devel haveged libpwquality linux-hardened rkhunter sysstat)
# packages that used to be in base
_PACSTRAP+=(linux-firmware logrotate lvm2 man-db man-pages)
if [ "${AA_MACHINEROLE^^}" = "SERVER" ] || [ "${AA_MACHINEROLE^^}" = "VM" ]; then
	_PACSTRAP+=(apparmor usbguard)
fi
# bootloader
if [ "${AA_MACHINETYPE^^}" = "UEFI" ]; then
	_PACSTRAP+=(gptfdisk)
else
	_PACSTRAP+=(grub)
fi
# filesystem
_PACSTRAP+=(rsync)
if [ ! "${AA_MACHINEROLE^^}" = "VM" ]; then
	# ROLE=VM: nfs-utils is not auto-installed (security risk)
	_PACSTRAP+=(nfs-utils)
fi
# networking / services
_PACSTRAP+=(bind-tools cronie nftables openssh)
# pacman / aur helper
_PACSTRAP+=(pacman-contrib pyalpm reflector)
# common
_PACSTRAP+=(arch-audit fish git sudo tmux vim wget)
_PACSTRAP+=(bc dateutils htop iotop inetutils)
# compression
_PACSTRAP+=(p7zip unrar)
#_PACSTRAP=(arch-audit base base-devel bc bind-tools cronie dateutils fish gptfdisk git htop iotop lsof nfs-utils nftables openssh p7zip pacman-contrib pyalpm refind-efi reflector sudo tmux unrar unzip vim zip)
if [ "${AA_UCODE^^}" = "INTEL" ]; then
	_PACSTRAP+=(intel-ucode)
elif [ "${AA_UCODE^^}" = "AMD" ]; then
	_PACSTRAP+=(amd-ucode)
fi
if [ "${AA_MACHINEROLE^^}" = "VM" ]; then
	_PACSTRAP+=(qemu-guest-agent)
else
	_PACSTRAP+=(lm_sensors)
fi
if [ "${AA_XORG}" -ne "0" ]; then
	_PACSTRAP+=(alsa-utils pulseaudio-alsa xorg-server xorg-xinit xorg-apps)
	if [ "${AA_MACHINEROLE^^}" = "VM" ]; then
		if [ "${AA_XORG}" -eq "1" ]; then
			_PACSTRAP+=(spice-vdagent xf86-video-qxl)
		fi
	else
		if [ "${AA_XORG}" -eq "1" ]; then
			_PACSTRAP+=(libva-intel-driver libvdpau-va-gl mesa-vdpau vdpauinfo vulkan-intel)
		elif [ "${AA_XORG}" -eq "2" ]; then
			_PACSTRAP+=(mesa-vdpau nvidia-dkms nvidia-settings vdpauinfo)
		fi
	fi
fi
if [ -n "${AA_TFAN_CONFIG}" ]; then
	_PACSTRAP+=(boost cmake libatasmart yaml-cpp)
	_PACSTRAP_REMOVE+=(boost cmake)
fi
if [ -n "${AA_TLP_CONFIG}" ]; then
	_PACSTRAP+=(tlp)
fi
if [ -n "${AA_WIFI_SSID}" ]; then
	_PACSTRAP+=(wpa_supplicant)
fi
_AA_CMD="Pacstrap Installation Script"
/usr/bin/pacstrap "-K" "/mnt" "${_PACSTRAP[@]}" >/dev/null 2>&1
validate "$?"

printf "\\n"
# }}}
# Config: Mount Points {{{
desc "Config: [0mMount Points"
_AA_CMD="Generate: /etc/fstab"
/usr/bin/genfstab -pU /mnt >> /mnt/etc/fstab
validate "$?"

_AA_CMD="Fstab: Secure /boot"
if [ "${AA_MACHINETYPE^^}" = "UEFI" ]; then
	/usr/bin/sed -i 's/rw,relatime,fmask/ro,noatime,nodev,noexec,nosuid,fmask/' /mnt/etc/fstab
else
	/usr/bin/sed -i 's/rw,relatime,stripe=4/ro,noatime,nodev,noexec,nosuid,stripe=4/' /mnt/etc/fstab
fi
validate "$?"

_AA_CMD="Fstab: Secure /"
/usr/bin/sed -i 's/rw,noatime\t0 1/defaults,noatime\t0 1/' /mnt/etc/fstab
validate "$?"

_AA_CMD="Fstab: Secure /var"
/usr/bin/sed -i 's/\/var[\t ]*ext4[\t ]*rw/\/var\t\text4\t\trw,nodev/' /mnt/etc/fstab
validate "$?"

_AA_CMD="Fstab: Secure /dev & /dev/shm"
echo -e "# /dev: device nodes\ndevtmpfs\t/dev\tdevtmpfs\tdefaults,noexec,nosuid\t0 0\n\n# /dev/shm: shared application memory\ntmpfs\t/dev/shm\ttmpfs\tdefaults,noatime,nodev,nosuid,noexec,size=1024M,mode=1770,uid=root,gid=shm\t0 0\n" >> /mnt/etc/fstab
validate "$?"

_AA_CMD="Fstab: Secure /tmp"
echo -e "# /tmp: temporary files\ntmpfs\t/tmp\t\ttmpfs\tdefaults,noatime,nodev,noexec,nosuid,size=8192M,mode=1777\t0 0\n" >> /mnt/etc/fstab
validate "$?"

_AA_CMD="Fstab: Secure /var/tmp"
echo -e "# /var/tmp: temporary files (preserved)\n/tmp\t/var/tmp\tnone\tdefaults,noatime,nodev,noexec,nosuid,bind\t0 0\n" >> /mnt/etc/fstab
validate "$?"

_AA_CMD="Fstab: Secure /var/cache/makepkg"
echo -e "# /var/cache/makepkg: temporary build dir\ntmpfs\t/var/cache/makepkg\t\ttmpfs\tdefaults,noatime,nodev,nosuid,size=4096M,mode=1770,uid=root,gid=wheel\t0 0\n" >> /mnt/etc/fstab
validate "$?"

_AA_CMD="Fstab: Secure /proc"
if [ "${AA_XORG}" -ne "0" ]; then
	echo -e "# /proc: kernel and process information\nproc\t/proc\t\tproc\tnodev,noexec,nosuid,gid=wheel\t0 0" >> /mnt/etc/fstab
else
	echo -e "# /proc: kernel and process information\nproc\t/proc\t\tproc\tnodev,noexec,nosuid,hidepid=2,gid=wheel\t0 0" >> /mnt/etc/fstab
fi
validate "$?"

echo -en "\n# vim: ft=fstab sts=4 sw=4 ts=4 noet:\n" >> /mnt/etc/fstab

printf "\\n"
# }}}
# Config: User Accounts {{{
desc "Config: [0mUser Accounts"
_AA_CMD="Enforce Strong Passwords"
/usr/bin/cat > /mnt/etc/pam.d/passwd << EOF
#%PAM-1.0
password required pam_pwquality.so retry=2 difok=6 minlen=12 dcredit=-1 ucredit=-1 lcredit=-1 ocredit=-1 maxrepeat=2 maxsequence=4 reject_username
password required pam_unix.so use_authtok shadow sha512 rounds=65535
EOF

_AA_CMD="Enforce Password Rotation (4 years)"
/usr/bin/sed -i -e 's/^PASS_MAX_DAYS\t99999/PASS_MAX_DAYS\t1460/' -e 's/^PASS_MIN_DAYS\t0/PASS_MIN_DAYS\t1/' /mnt/etc/login.defs
validate "$?"

_AA_CMD="Enforce Password Rounds (SHA512)"
/usr/bin/cat >> /mnt/etc/login.defs << EOF
SHA_CRYPT_MIN_ROUNDS=655360
SHA_CRYPT_MAX_ROUNDS=655360
EOF
validate "$?"

_AA_CMD="Modify: Superuser Password"
/usr/bin/arch-chroot /mnt chpasswd <<< "root:${AA_PASSWD}" >/dev/null 2>&1
validate "$?"

_AA_CMD="Create: User Account ${AA_USERNAME}"
/usr/bin/arch-chroot /mnt useradd -m -G wheel,systemd-journal -s /bin/bash ${AA_USERNAME}
validate "$?"

_AA_CMD="Modify: User Password ${AA_USERNAME}"
/usr/bin/arch-chroot /mnt chpasswd <<< "${AA_USERNAME}:${AA_PASSWD}" >/dev/null 2>&1
validate "$?"

_AA_CMD="Create: /etc/sudoers.d/kyaulabs"
/usr/bin/cat > /mnt/etc/sudoers.d/kyaulabs << EOF
Defaults editor=/usr/bin/rvim
Defaults env_keep += "SSH_AUTH_SOCK"
%wheel ALL=(ALL:ALL) ALL
%wheel ALL=(ALL:ALL) NOPASSWD:/usr/sbin/checkupdates
EOF
validate "$?"

_AA_CMD="Permissions: /etc/sudoers.d/kyaulabs"
/usr/bin/chmod 600 /mnt/etc/sudoers.d/kyaulabs
validate "$?"

_AA_CMD="Groupadd: ssh"
/usr/bin/arch-chroot /mnt groupadd ssh
/usr/bin/arch-chroot /mnt gpasswd -a ${AA_USERNAME} ssh >/dev/null 2>&1
validate "$?"

_AA_CMD="Groupadd: shm"
/usr/bin/arch-chroot /mnt groupadd shm
/usr/bin/arch-chroot /mnt gpasswd -a ${AA_USERNAME} shm >/dev/null 2>&1
validate "$?"

printf "\\n"
# }}}
# Config: Bootloader {{{
desc "Config: [0mBootloader"
if [ "${AA_MACHINETYPE^^}" = "UEFI" ]; then
	_AA_CMD="Install: systemd-boot"
	/usr/bin/arch-chroot /mnt bootctl install >/dev/null 2>&1
	validate "$?"

	_AA_CMD="Create: systemd-boot Pacman Hook"
	/usr/bin/mkdir -p /mnt/etc/pacman.d/hooks/
	/usr/bin/cat > /mnt/etc/pacman.d/hooks/00-systemd-boot.hook << EOF
[Trigger]
Type = Package
Operation = Upgrade
Target = systemd

[Action]
Description = Updating systemd-boot
When = PostTransaction
Exec = /usr/bin/bootctl update
EOF
	validate "$?"

	_AA_CMD="Modify: /boot/loader/loader.conf"
	/usr/bin/cat > /mnt/boot/loader/loader.conf << EOF
default arch.conf
timeout 5
console-mode max
editor no
EOF

	_AA_CMD="Modify: /boot/loader/entries/arch.conf"
	_ROOT="root=/dev/${AA_HOST}/root"
	_OPTIONS="rw add_efi_memmap zswap.enabled=1 zswap.compressor=lz4 zswap.max_pool_percent=20 zswap.zpool=z3fold"
	if [ "${AA_MACHINEROLE^^}" = "SERVER" ] || [ "${AA_MACHINEROLE^^}" = "VM" ]; then
		_OPTIONS="${_OPTIONS} apparmor=1 security=apparmor lsm=landlock,lockdown,yama,integrity,apparmor,bpf audit=1"
	fi
	if [ ! "${AA_MACHINEROLE^^}" = "VM" ]; then
		if [ "${AA_XORG}" -eq "1" ]; then
			_OPTIONS="${_OPTIONS} i915.enable_fbc=1 i915.enable_guc=2 i915.fastboot=1"
		elif [ "${AA_XORG}" -eq "2" ]; then
			_OPTIONS="${_OPTIONS} nvidia-drm.modeset=1 nvidia.NVreg_UsePageAttributeTable=1"
		fi
	fi
	if [ "${AA_ENCRYPT}" -eq "1" ]; then
		_UUID_LUKS=$(blkid -s UUID -o value ${AA_DISK}2)
		_ROOT="rd.luks.name=${_UUID_LUKS}=cryptlvm rd.luks.options=discard root=/dev/${AA_HOST}/root resume=/dev/${AA_HOST}/swap"
	fi
	if [ "${AA_UCODE^^}" = "AMD" ]; then
		_OPTIONS="initrd	/amd-ucode.img\ninitrd	/initramfs-linux-hardened.img\noptions	${_ROOT} ${_OPTIONS}"
	elif [ "${AA_UCODE^^}" = "INTEL" ]; then
		_OPTIONS="initrd	/intel-ucode.img\ninitrd	/initramfs-linux-hardened.img\noptions	${_ROOT} ${_OPTIONS}"
	else
		_OPTIONS="initrd    /initramfs-linux-hardened.img\noptions  ${_ROOT} ${_OPTIONS}"
	fi
	/usr/bin/echo -e "title	Arch Linux\nlinux	/vmlinuz-linux-hardened\n${_OPTIONS}" > /mnt/boot/loader/entries/arch.conf
	validate "$?"
else
	_AA_CMD="Install: GRUB2"
	/usr/bin/partprobe ${AA_DISKO}
	/usr/bin/arch-chroot /mnt grub-install --target=i386-pc ${AA_DISKO} >/dev/null 2>&1
	validate "$?"

	_AA_CMD="Secure: GRUB2"
	GRUB_PASSWD=$(echo -e "${AA_PASSWD}\n${AA_PASSWD}\n" | /mnt/usr/sbin/grub-mkpasswd-pbkdf2 | tail -n 1 | cut -d ' ' -f 7)
	/usr/bin/cat > /mnt/etc/grub.d/05_superusers << EOL
cat << EOF
set superusers="${AA_USERNAME}"
password_pbkdf2 ${AA_USERNAME} ${GRUB_PASSWD}
EOF
EOL
	chmod 0700 /mnt/etc/grub.d/05_superusers
	validate "$?"

	_AA_CMD="Secure: GRUB2 Menu Entries"
	/usr/bin/sed -i "s/ \${CLASS} / \${CLASS} --users \'\' /" /mnt/etc/grub.d/10_linux
	validate "$?"

	_AA_CMD="Config: GRUB2 Kernel Parameters"
	_OPTIONS="zswap.enabled=1 zswap.compressor=lz4 zswap.max_pool_percent=20 zswap.zpool=z3fold"
	_TIMEOUT="10"
	if [ "${AA_MACHINEROLE^^}" = "SERVER" ] || [ "${AA_MACHINEROLE^^}" = "VM" ]; then
		_TIMEOUT="3"
		_OPTIONS="${_OPTIONS} apparmor=1 security=apparmor lsm=landlock,lockdown,yama,integrity,apparmor,bpf audit=1"
	fi
	if [ "${AA_UCODE^^}" = "AMD" ]; then
		_OPTIONS="${_OPTIONS} initrd=/amd-ucode.img"
	elif [ "${AA_UCODE^^}" = "INTEL" ]; then
		_OPTIONS="${_OPTIONS} initrd=/intel-ucode.img"
	fi
	if [ ! "${AA_MACHINEROLE^^}" = "VM" ]; then
		if [ "${AA_XORG}" -eq "1" ]; then
			_OPTIONS="${_OPTIONS} i915.enable_fbc=1 i915.enable_guc=2 i915.fastboot=1"
		elif [ "${AA_XORG}" -eq "2" ]; then
			_OPTIONS="${_OPTIONS} nvidia-drm.modeset=1 nvidia.NVreg_UsePageAttributeTable=1"
		fi
	fi
	/usr/bin/sed -i -e "s/GRUB_TIMEOUT=5/GRUB_TIMEOUT=${_TIMEOUT}/" -e "s/GRUB_CMDLINE_LINUX_DEFAULT=\"loglevel=3 quiet\"/GRUB_CMDLINE_LINUX_DEFAULT=\"${_OPTIONS}\"/" /mnt/etc/default/grub
	validate "$?"

	if [ "${AA_ENCRYPT}" -eq "1" ]; then
		_AA_CMD="Config: GRUB2 LUKS Support"
		/usr/bin/sed -i 's/#GRUB_ENABLE_CRYPT/GRUB_ENABLE_CRYPT/' /mnt/etc/default/grub
		validate "$?"
	fi
	
	_AA_CMD="Config: GRUB2"
	/usr/bin/arch-chroot /mnt grub-mkconfig -o /boot/grub/grub.cfg >/dev/null 2>&1
	validate "$?"
fi

_AA_CMD="Install: Console Font"
/usr/bin/wget https://gitlab.com/kyaulabs/refind-aarch/raw/master/fonts/agave-r.psf.gz -O /mnt/usr/share/kbd/consolefonts/agave-r.psf.gz >/dev/null 2>&1
validate "$?"

printf "\\n"
# }}}
# Config: Kernel {{{
desc "Config: [0mKernel"
_AA_CMD="Modify: /etc/mkinitcpio.conf"
_MODULES="crc32_generic crc32c-intel fuse lz4 lz4_compress"
if [ "${AA_MACHINEROLE^^}" = "VM" ]; then
	_MODULES="${_MODULES} virtio virtio_blk virtio_pci virtio_net"
else
	if [ "${AA_XORG}" -eq "1" ]; then
		_MODULES="${_MODULES} i915"
	elif [ "${AA_XORG}" -eq "2" ]; then
		_MODULES="${_MODULES} nvidia nvidia_modeset nvidia_uvm nvidia_drm"
	fi
fi
if [ "${AA_MACHINEROLE^^}" = "SERVER" ]; then
	_MODULES="acpi_ipmi ${_MODULES}"
fi
_STRING=("-i" "-e" "s/^MODULES=()/MODULES=(${_MODULES})/")
if [ "${AA_ENCRYPT}" -eq "1" ]; then
	_STRING+=("-e" "s/base udev autodetect modconf kms keyboard keymap consolefont block filesystems/systemd keyboard sd-vconsole autodetect modconf kms keymap block sd-encrypt lvm2 filesystems/")
else
	#if [ "${AA_MACHINETYPE^^}" = "UEFI" ]; then
		_STRING+=("-e" "s/base udev autodetect modconf kms keyboard keymap consolefont block filesystems/systemd keyboard sd-vconsole autodetect modconf kms keymap block lvm2 filesystems/")
	#else
		#_STRING+=("-e" "s/base udev autodetect modconf kms block filesystems keyboard/base udev keyboard consolefont autodetect modconf kms block lvm2 filesystems/")
	#fi
fi
/usr/bin/sed "${_STRING[@]}" /mnt/etc/mkinitcpio.conf >/dev/null 2>&1
validate "$?"

_AA_CMD="Config: /etc/vconsole.conf"
/usr/bin/cat > /mnt/etc/vconsole.conf <<EOF
FONT=agave-r
MAP=8859-2
EOF
validate "$?"

_AA_CMD="Generate: Initial Ramdisk Environment"
/usr/bin/arch-chroot /mnt mkinitcpio -P >/dev/null 2>&1
validate "$?"

if [ "${AA_XORG}" -eq "2" ]; then
	_AA_CMD="Create: NVIDIA Pacman Hook"
	/usr/bin/mkdir -p /mnt/etc/pacman.d/hooks/
	/usr/bin/cat > /mnt/etc/pacman.d/hooks/nvidia.conf << EOF
[Trigger]
Operation=Install
Operation=Upgrade
Operation=Remove
Type=Package
Target=nvidia-dkms
Target=linux-hardened
# Change the linux part above and in the Exec line if a different kernel is used

[Action]
Description=Update Nvidia module in initcpio
Depends=mkinitcpio
When=PostTransaction
NeedsTargets
Exec=/bin/sh -c 'while read -r trg; do case \$trg in linux) exit 0; esac; done; /usr/bin/mkinitcpio -P'
EOF
	validate "$?"
fi

_AA_CMD="Security: Kernel Runtime Parameters"
/usr/bin/cat > /mnt/etc/sysctl.d/50-security.conf << EOF
dev.tty.ldisc_autoload=0
fs.protected_fifos=2
fs.protected_regular=2
fs.suid_dumpable=0
kernel.dmesg_restrict=1
kernel.kptr_restrict=2
kernel.sysrq=0
kernel.unprivileged_bpf_disabled=1
net.ipv4.conf.all.log_martians=1
net.ipv4.conf.all.rp_filter=1
net.ipv4.conf.all.secure_redirects=0
net.ipv4.conf.default.log_martians=1
net.ipv4.conf.default.secure_redirects=0
net.ipv4.conf.default.send_redirects=0
net.ipv4.conf.all.send_redirects=0
net.ipv4.tcp_syncookies=1
net.ipv4.tcp_rfc1337=1
EOF
if [ ! "${AA_MACHINEROLE^^}" = "SERVER" ]; then
	/usr/bin/cat >> /mnt/etc/sysctl.d/50-security.conf << EOF
net.ipv4.conf.default.accept_redirects=0
net.ipv4.conf.default.accept_source_route=0
net.ipv4.conf.all.accept_redirects=0
net.ipv6.conf.all.accept_redirects=0
net.ipv6.conf.default.accept_redirects=0
EOF
fi
validate "$?"

if [ "${AA_MACHINEROLE^^}" = "SERVER" ] || [ "${AA_MACHINEROLE^^}" = "VM" ]; then
	_AA_CMD="Blacklist Kernel Modules"
	/usr/bin/cat > /mnt/etc/modprobe.d/blacklist.conf << EOF
install affs /bin/false
install befs /bin/false
#install cifs /bin/false
install coda /bin/false
install cramfs /bin/false
install dccp /bin/true
install firewire-core /bin/false
install hfs /bin/false
install hfsplus /bin/false
install ip_tables /bin/false
install jfs /bin/false
install jffs2 /bin/false
install kafs /bin/false
install mtd /bin/false
install nilfs2 /bin/false
install ocfs2 /bin/false
install omfs /bin/false
install orangefs /bin/false
install overlay /bin/false
#install reiserfs /bin/false
install rds /bin/true
install romfs /bin/false
install sctp /bin/true
install squashfs /bin/false
install tipc /bin/true
install ubifs /bin/false
install udf /bin/false
install usb-storage /bin/false
blacklist dccp
blacklist sctp
blacklist rds
blacklist tipc
EOF
	validate "$?"
fi

_AA_CMD="Symlink: /etc/localtime"
/usr/bin/arch-chroot /mnt ln -sf /usr/share/zoneinfo/${AA_TZ} /etc/localtime
validate "$?"

_AA_CMD="Sync: Hardware Clock"
/usr/bin/arch-chroot /mnt hwclock --systohc
validate "$?"

_AA_CMD="Modify: /etc/locale.gen"
/usr/bin/sed -i 's/^#en_US\.UTF/en_US\.UTF/' /mnt/etc/locale.gen >/dev/null 2>&1
validate "$?"

_AA_CMD="Generate: Locale"
/usr/bin/arch-chroot /mnt locale-gen >/dev/null 2>&1
validate "$?"

_AA_CMD="Modify: /etc/locale.conf"
echo "LANG=en_US.UTF-8" > /mnt/etc/locale.conf
validate "$?"

printf "\\n"
# }}}
# Config: Security Defaults {{{
desc "Config: [0mSecurity Defaults"
_AA_CMD="Modify: Root \$EDITOR"
echo -e "EDITOR=/usr/bin/rvim\nSUDO_EDITOR=/usr/bin/rvim" >> /mnt/root/.bashrc
validate "$?"

_AA_CMD="Create: /etc/issue"
/usr/bin/cat > /mnt/etc/issue << EOF
Unauthorized access to this system is prohibited
Press <Ctrl-D> if you are not an authorized user

EOF
/usr/bin/cp -f /mnt/etc/issue /mnt/etc/issue.net >/dev/null 2>&1
/usr/bin/chmod 644 /mnt/etc/issue /mnt/etc/issue.net
validate "$?"

_AA_CMD="Permissions: /bin/su"
/usr/bin/sed -i 's/^#auth\t\trequired\tpam_wheel.so use_uid/auth\t\trequired\tpam_wheel.so use_uid/' /mnt/etc/pam.d/su >/dev/null 2>&1
/usr/bin/sed -i 's/^#auth\t\trequired\tpam_wheel.so use_uid/auth\t\trequired\tpam_wheel.so use_uid/' /mnt/etc/pam.d/su-l >/dev/null 2>&1
validate "$?"

_AA_CMD="Permissions: /boot, /root, /home/${AA_USERNAME}"
if [ "${AA_MACHINETYPE^^}" = "UEFI" ]; then
	/usr/bin/arch-chroot /mnt chmod -R go-rwx /root /home/kyau /boot
else
	/usr/bin/arch-chroot /mnt chmod -R go-rwx /root /home/kyau
	/usr/bin/arch-chroot /mnt chmod go-rwx /boot
fi
validate "$?"

_AA_CMD="Modify: Oldschool NIC Names"
/usr/bin/ln -sf /dev/null /mnt/etc/udev/rules.d/80-net-setup-link.rules
validate "$?"

if [ "${AA_ENCRYPT}" -eq "1" ]; then
	if [ "${AA_MACHINEROLE^^}" = "DESKTOP" ] || [ "${AA_MACHINEROLE^^}" = "LAPTOP" ]; then
		_AA_CMD="Set: Auto-login ${AA_USERNAME}"
		/usr/bin/mkdir -p /mnt/etc/systemd/system/getty@tty1.service.d/
		/usr/bin/cat > /mnt/etc/systemd/system/getty@tty1.service.d/override.conf << EOF
[Service]
ExecStart=
ExecStart=-/usr/bin/agetty --autologin ${AA_USERNAME} --noclear %I \$TERM
EOF
		validate "$?"
	fi
fi

_AA_CMD="Modify: Default umask (022 => 027)"
/usr/bin/sed -i 's/umask 022/umask 027/' /mnt/etc/profile
/usr/bin/sed -i 's/# If not running/umask 027\n\n# If not running/' /mnt/etc/bash.bashrc
validate "$?"

_AA_CMD="Modify: Default Profile"
/usr/bin/cat > /mnt/etc/profile.d/kyaulabs.sh << EOF
# \$KYAULabs: kyaulabs.sh,v 1.0.0 2019/08/15 00:51:28 kyau Exp \$

# default permissions
umask 027

# disable core dumps
ulimit -c 0

# set a 15 minute timeout policy for shells
readonly TMOUT=900
readonly HISTFILE

# vim: ft=bash sts=4 sw=4 ts=4 noet:
EOF
validate "$?"

_AA_CMD="Logrotate: pacman.log"
/usr/bin/chmod 0640 /mnt/var/log/pacman.log
/usr/bin/chown root:wheel /mnt/var/log/pacman.log
/usr/bin/cat > /mnt/etc/logrotate.d/pacman << EOF
/var/log/pacman.log {
	compress
	yearly
	create 0640 root wheel
	size 1M
	rotate 1
}
EOF
validate "$?"

_AA_CMD="Permissions: Compilers"
/usr/bin/arch-chroot /mnt pacman -Ql gcc | grep '/usr/bin/.\+' | awk '{ print $2 }' | {
	while IFS= read -r file; do
		chmod o-rwx "/mnt${file}"
		chown root:wheel "/mnt${file}"
	done
	chmod o-rwx "/mnt/usr/sbin/as"
	chown root:wheel "/mnt/usr/sbin/as"
}
validate "$?"

_AA_CMD="rkhunter: exceptions"
/usr/bin/cat >> /mnt/etc/rkhunter.conf << EOF
SCRIPTWHITELIST=/usr/bin/egrep
SCRIPTWHITELIST=/usr/bin/fgrep
SCRIPTWHITELIST=/usr/bin/ldd
EOF
validate "$?"

printf "\\n"
# }}}
# Config: Networking {{{
desc "Config: [0mNetworking"
_AA_CMD="Config: eth0.network"
_NIC="[Match]\nName=eth0\n\n[Network]\n"
if [ -n "${AA_IPADDR}" ]; then
	_DNS=""
	if [ -z "${AA_DNS}" ] || [ "${AA_DNS^^}" = "CLOUDFLARE" ]; then
		_DNS="DNS=1.1.1.1\nDNS=1.0.0.1\n"
	elif [ "${AA_DNS^^}" = "OPENDNS" ]; then
		_DNS="DNS=208.67.222.222\nDNS=208.67.220.220\n"
	elif [ "${AA_DNS^^}" = "GOOGLE" ]; then
		_DNS="DNS=8.8.8.8\nDNS=8.8.4.4\n"
	elif [ "${AA_DNS^^}" = "NEUSTAR" ]; then
		_DNS="DNS=156.154.70.5\nDNS=156.154.71.5\n"
	else
		_DNS="DNS=${AA_DNS}\n"
	fi
	_DNS="${_DNS}DNSOverTLS=opportunistic\n"
	if [ "${#AA_DOMAINS[*]}" -gt 0 ]; then
		for i in "${AA_DOMAINS[@]}"; do
			_DNS="${_DNS}Domains=${i}\n"
		done
	fi
	_NIC="${_NIC}DHCP=no\n${_DNS}IPv6AcceptRA=false\nNTP=pool.ntp.org\n[Address]\nAddress=${AA_IPADDR}/24\nLabel=archlinux\n\n[Route]\nGateway=${AA_GATEWAY}"
else
	_NIC="${_NIC}DHCP=ipv4\nIPv6AcceptRA=false\nNTP=pool.ntp.org\n\n[DHCP]\nUseDNS=true\nUseDomains=true\n\n[Address]\nLabel=archlinux"
fi
echo -e "${_NIC}" > /mnt/etc/systemd/network/eth0.network
validate "$?"

_AA_CMD="Config: eth.link"
_MACADDR=$(/usr/bin/cat /sys/class/net/eth0/address)
echo -e "[Match]\nMACAddress=${_MACADDR}\n\n[Link]\nName=eth0" > /mnt/etc/systemd/network/eth0.link
validate "$?"

if [ -n "${AA_WIFI_SSID}" ]; then
	_AA_CMD="Create: /etc/wpa_supplicant/wpa_supplicant-wlan0.conf"
	/usr/bin/arch-chroot /mnt /usr/bin/wpa_passphrase ${AA_WIFI_SSID} ${AA_WIFI_PASSWD} > /mnt/etc/wpa_supplicant/wpa_supplicant-wlan0.conf
	validate "$?"

	_AA_CMD="Config: wlan0.network"
	echo -e "[Match]\nName=wlan0\n\n[Network]\nDHCP=ipv4\nNTP=pool.ntp.org\n[DHCP]\nUseDNS=true\nUseDomains=true\n[Address]\nLabel=archlinux" > /mnt/etc/systemd/network/wlan0.network
	validate "$?"

	_AA_CMD="Config: wlan0.link"
	_MACADDR=$(/usr/bin/cat /sys/class/net/wlan0/address)
	echo -e "[Match]\nMACAddress=${_MACADDR}\n\n[Link]\nName=wlan0" > /mnt/etc/systemd/network/wlan0.link
	validate "$?"

	_AA_CMD="Systemd: Enable (wpa_supplicant@wlan0.service)"
	/usr/bin/arch-chroot /mnt systemctl enable wpa_supplicant@wlan0.service >/dev/null 2>&1
	validate "$?"
fi

_AA_CMD="Modify: /etc/hostname"
echo -e "${AA_HOSTNAME}" > /mnt/etc/hostname
validate "$?"

_AA_CMD="Modify: /etc/hosts"
/usr/bin/cat > /mnt/etc/hosts << EOF
# \$KYAULabs: hosts,v 1.0.0 2019/08/15 00:34:12 kyau Exp \$
#

# <localhost>
127.0.0.1			local
127.0.0.1			localhost
127.0.0.1			localhost.localdomain
255.255.255.255		broadcasthost
::1					localhost
::1					ip6-localhost ip6-loopback
fe00::0				ip6-localnet
fe00::1				ip6-allnodes
fe00::2				ip6-allrouters
fe00::3				ip6-allhosts
# </localhost>
EOF
if [ -n "${AA_IPADDR}" ]; then
	echo -e "\n# <hostname>\n${AA_IPADDR}\t${AA_HOSTNAME}\t${AA_HOST}\n# </hostname>\n" >> /mnt/etc/hosts
fi
echo -e "\n# vim: ft=conf sts=4 sw=4 ts=4 noet:" >> /mnt/etc/hosts
validate "$?"

_AA_CMD="Systemd: Enable (systemd-networkd.service)"
/usr/bin/arch-chroot /mnt systemctl enable systemd-networkd.service >/dev/null 2>&1
validate "$?"

_AA_CMD="Systemd: Enable (systemd-resolved.service)"
/usr/bin/arch-chroot /mnt systemctl enable systemd-resolved.service >/dev/null 2>&1
validate "$?"

_AA_CMD="Systemd: Config (/etc/systemd/resolved.conf.d/)"
/usr/bin/mkdir -p /mnt/etc/systemd/resolved.conf.d/
_OUT=""
if [ "${#AA_DOMAINS[*]}" -gt 0 ]; then
	i_count=0
	for i in "${AA_DOMAINS[@]}"; do
		if [ $i_count -eq 0 ]; then
			_OUT="${_OUT}Domains=${i}"
		else
			_OUT="${_OUT} ${i}"
		fi
		i_count=$((i_count + 1))
	done
fi
/usr/bin/cat >> /mnt/etc/systemd/resolved.conf.d/kyaulabs.conf << EOF
[Resolve]
${_OUT}
DNSSEC=yes
DNSOverTLS=opportunistic
EOF
validate "$?"

printf "\\n"
# }}}
# Config: Package Defaults {{{
desc "Config: [0mPackage Defaults"
_AA_CMD="Modify: /etc/pacman.conf"
/usr/bin/sed -i -e 's/#Color/Color/' -e 's/#CacheDir    = \/var\/cache\/pacman\/pkg\//CacheDir = \/var\/cache\/makepkg\//' /mnt/etc/pacman.conf >/dev/null 2>&1
validate "$?"

_AA_CMD="Modify: /etc/makepkg.conf"
/usr/bin/mkdir -p /mnt/var/cache/makepkg
/usr/bin/chmod 0750 /mnt/var/cache/makepkg
/usr/bin/sed -i 's/BUILDDIR=\/tmp\/makepkg/BUILDDIR=\/var\/cache\/makepkg/' /mnt/etc/makepkg.conf
validate "$?"

_AA_CMD="Modify: /etc/pacman.d/mirrorlist"
/usr/bin/arch-chroot /mnt reflector --latest 100 --protocol https --sort rate --save /etc/pacman.d/mirrorlist >/dev/null 2>&1
validate "$?" 1

_AA_CMD="Modify: Self-Updating mirrorlist"
/usr/bin/mkdir -p /mnt/etc/pacman.d/hooks/
/usr/bin/cat > /mnt/etc/pacman.d/hooks/mirrorupgrade.hook << EOF
[Trigger]
Operation = Upgrade
Type = Package
Target = pacman-mirrorlist

[Action]
Description = Updating pacman-mirrorlist with reflector and removing pacnew...
When = PostTransaction
Depends = reflector
Exec = /bin/sh -c "reflector --protocol https --latest 100 --age 24 --sort rate --save /etc/pacman.d/mirrorlist; rm -f /etc/pacman.d/mirrorlist.pacnew"
EOF
validate "$?"

_AA_CMD="Config: Sudo (temporary)"
echo -e "${AA_USERNAME} ALL=(ALL) NOPASSWD: ALL\n" > /mnt/etc/sudoers.d/temporary
validate "$?"

_AA_CMD="Download: AUR Helper (${AA_PKGMAN})"
/usr/bin/arch-chroot /mnt runuser -l ${AA_USERNAME} -c "git clone https://aur.archlinux.org/${AA_PKGMAN}.git" >/dev/null 2>&1
validate "$?"

_AA_CMD="Compile: AUR Helper (${AA_PKGMAN})"
/usr/bin/arch-chroot /mnt runuser -l ${AA_USERNAME} -c "cd ${AA_PKGMAN} && makepkg -fsr --noconfirm" >/dev/null 2>&1
validate "$?"

_AA_CMD="Install: AUR Helper (${AA_PKGMAN})"
T_PKGAUR=$(/usr/bin/arch-chroot /mnt ls /home/${AA_USERNAME}/${AA_PKGMAN}/ | /usr/bin/grep .pkg.tar.zst)
/usr/bin/arch-chroot /mnt pacman -U "/home/${AA_USERNAME}/${AA_PKGMAN}/${T_PKGAUR}" --noconfirm >/dev/null 2>&1
validate "$?"

_AA_CMD="Remove: AUR Helper Source"
/usr/bin/arch-chroot /mnt runuser -l ${AA_USERNAME} -c "rm -rf ${AA_PKGMAN}"
validate "$?"

if [ -n "${AA_TFAN_CONFIG}" ]; then
	_AA_CMD="Download: Thinkfan (AUR)"
	/usr/bin/arch-chroot /mnt runuser -l ${AA_USERNAME} -c 'git clone https://aur.archlinux.org/thinkfan-git.git' >/dev/null 2>&1
	validate "$?"

	_AA_CMD="Compile: Thinkfan (AUR)"
	/usr/bin/arch-chroot /mnt runuser -l ${AA_USERNAME} -c 'cd thinkfan-git && makepkg -fsr --noconfirm' >/dev/null 2>&1
	validate "$?"

	_AA_CMD="Install: Thinkfan (AUR)"
	T_THINKFAN=$(/usr/bin/arch-chroot /mnt ls /home/${AA_USERNAME}/thinkfan-git/ | /usr/bin/grep .pkg.tar.zst)
	/usr/bin/arch-chroot /mnt pacman -U "/home/${AA_USERNAME}/thinkfan-git/${T_THINKFAN}" --noconfirm >/dev/null 2>&1
	validate "$?"

	_AA_CMD="Remove: Thinkfan Source"
	/usr/bin/arch-chroot /mnt runuser -l ${AA_USERNAME} -c 'rm -rf thinkfan-git'
	validate "$?"

	_AA_CMD="Remove: Thinkfan Build Depends"
	/usr/bin/arch-chroot /mnt pacman -Rs boost --noconfirm >/dev/null 2>&1
	validate "$?"
fi

_AA_CMD="Modify: /etc/makepkg.conf"
/usr/bin/sed -i 's/^#BUILDDIR/BUILDDIR/' /mnt/etc/makepkg.conf
validate "$?"

printf "\\n"
# }}}
# Config: Service Defaults {{{
desc "Config: [0mService Defaults"
_AA_CMD="Journald: Log Size"
/usr/bin/mkdir -p /mnt/etc/systemd/journald.conf.d
/usr/bin/cat > /mnt/etc/systemd/journald.conf.d/kyaulabs.conf << EOF
[Journal]
SystemMaxUse=50M
EOF
validate "$?"

_AA_CMD="Systemd: Keep Boot Mesages"
/usr/bin/mkdir -p /mnt/etc/systemd/system/getty@tty1.service.d
/usr/bin/cat > /mnt/etc/systemd/system/getty@tty1.service.d/noclear.conf << EOF
[Service]
TTYVTDisallocate=no
EOF
validate "$?"

_AA_CMD="Systemd: Turn Numlock On"
/usr/bin/mkdir -p /mnt/etc/systemd/system/getty@.service.d
/usr/bin/cat > /mnt/etc/systemd/system/getty@.service.d/numlock.conf << EOF
[Service]
ExecStartPre=/bin/sh -c 'setleds -D +num < /dev/%I'
EOF
validate "$?"

_AA_CMD="Disable: Core Dumps"
/usr/bin/cat > /mnt/etc/sysctl.d/99-coredump.conf << EOF
kernel.core_pattern=|/bin/false
EOF
/usr/bin/mkdir -p /mnt/etc/systemd/coredump.conf.d/
/usr/bin/cat > /mnt/etc/systemd/coredump.conf.d/custom.conf << EOF
[Coredump]
Storage=none
ProcessSizeMax=0
EOF
echo "* hard core 0" >> /mnt/etc/security/limits.conf
validate "$?"

_AA_CMD="Secure: Crontab"
/usr/bin/chmod 0600 /mnt/etc/cron.deny
/usr/bin/chmod 0700 /mnt/etc/cron.d /mnt/etc/cron.daily /mnt/etc/cron.hourly /mnt/etc/cron.weekly /mnt/etc/cron.monthly
validate "$?"

_AA_CMD="Modify: /etc/systemd/timesyncd.conf"
/usr/bin/cat >> /mnt/etc/systemd/timesyncd.conf << EOF
NTP=0.arch.pool.ntp.org 1.arch.pool.ntp.org 2.arch.pool.ntp.org 3.arch.pool.ntp.org
FallbackNTP=0.pool.ntp.org 1.pool.ntp.org 0.us.pool.ntp.org
EOF
validate "$?"

_AA_CMD="Systemd: Enable (systemd-timesyncd.service)"
/usr/bin/arch-chroot /mnt systemctl enable systemd-timesyncd.service >/dev/null 2>&1
validate "$?"

if [ -n "${AA_TLP_CONFIG}" ]; then
	_AA_CMD="Systemd: Enable (tlp.service)"
	/usr/bin/arch-chroot /mnt systemctl enable tlp.service >/dev/null 2>&1
	validate "$?"

	_AA_CMD="Systemd: Enable (tlp-sleep.service)"
	/usr/bin/arch-chroot /mnt systemctl enable tlp-sleep.service >/dev/null 2>&1
	validate "$?"

	_AA_CMD="Systemd: Mask (systemd-rfkill.service)"
	/usr/bin/arch-chroot /mnt systemctl mask systemd-rfkill.service >/dev/null 2>&1
	validate "$?"

	_AA_CMD="Systemd: Mask (systemd-rfkill.socket)"
	/usr/bin/arch-chroot /mnt systemctl mask systemd-rfkill.socket >/dev/null 2>&1
	validate "$?"

	_AA_CMD="Download: /etc/defaults/tlp"
	/usr/bin/wget "${AA_TLP_CONFIG}" -O /mnt/etc/default/tlp >/dev/null 2>&1
	validate "$?"
fi

if [ -n "${AA_TFAN_CONFIG}" ]; then
	_AA_CMD="Download: /etc/thinkpad.conf"
	/usr/bin/wget "${AA_TFAN_CONFIG}" -O /mnt/etc/thinkfan.conf >/dev/null 2>&1
	validate "$?"

	_AA_CMD="Systemd: Enable (thinkfan.service)"
	/usr/bin/arch-chroot /mnt systemctl enable thinkfan.service >/dev/null 2>&1
	validate "$?"
fi

if [ "${AA_MACHINEROLE^^}" = "SERVER" ] || [ "${AA_MACHINEROLE^^}" = "VM" ]; then
	_AA_CMD="Systemd: Enable (sysstat.service)"
	/usr/bin/arch-chroot /mnt systemctl enable sysstat.service >/dev/null 2>&1
	validate "$?"

	_AA_CMD="Secure: SYSSTAT Log Files"
	/usr/bin/sed -i 's/UMASK=0022/UMASK=0027/' /mnt/etc/conf.d/sysstat
	validate "$?"

	_AA_CMD="Systemd: Enable (auditd.service)"
	/usr/bin/arch-chroot /mnt systemctl enable auditd.service >/dev/null 2>&1
	validate "$?"

	_AA_CMD="Config: Auditd"
	/usr/bin/sed -i 's/active = no/active = yes/' /mnt/etc/audit/plugins.d/syslog.conf
	/usr/bin/mkdir -p /mnt/etc/audit/rules.d
	/usr/bin/cat >> /mnt/etc/audit/rules.d/kyaulabs.rules << EOF
# \$KYAULabs: kyaulabs.rules,v 1.0.2 2020/01/23 14:00:12 kyau Exp \$
#
# attribution: https://github.com/Neo23x0/auditd
#			   https://linux-audit.com/tuning-auditd-high-performance-linux-auditing/

# Remove Existing Rules
-D

# Buffer Size
-b 8192

# Failure Mode (0: silent, 1: printk a failure message, 2: panic or halt system)
-f 1

# Ignore Errors
-i

# Self Auditing {{{
# Audit the Audit Logs
-w /var/log/audit/ -k auditlog

# Audit Configuration
-w /etc/audit/ -p wa -k auditconfig
-w /etc/libaudit.conf -p wa -k auditconfig
-w /etc/audisp/ -p wa -k auditconfig
# }}}

# Filters {{{
# Ignore Auditctl
-a always,exclude -F msgtype=CONFIG_CHANGE
-a always,exclude -F msgtype=SYSCALL -S 44
# Ignore SELinux AVC Records
-a always,exclude -F msgtype=AVC
# Ignore CWD Records
-a always,exclude -F msgtype=CWD
# Ignore End of Event Records
-a always,exclude -F msgtype=EOE
# Ignore Crypo Key
-a always,exclude -F msgtype=CRYPTO_KEY_USER
# VMware Tools
#-a exit,never -F arch=b32 -S fork -F success=0 -F path=/usr/lib/vmware-tools -F subj_type=initrc_t -F exit=-2
#-a exit,never -F arch=b64 -S fork -F success=0 -F path=/usr/lib/vmware-tools -F subj_type=initrc_t -F exit=-2
# High Volume Event Filter
-a exit,never -F arch=b32 -F dir=/dev/shm -k sharedmemaccess
-a exit,never -F arch=b64 -F dir=/dev/shm -k sharedmemaccess
-a exit,never -F arch=b32 -F dir=/var/lock/lvm -k locklvm
-a exit,never -F arch=b64 -F dir=/var/lock/lvm -k locklvm
# }}}

# Rules {{{
# Kernel Parameters
-w /etc/sysctl.conf -p wa -k sysctl
# Kernel Module Loading/Unloading
-a always,exit -F perm=x -F auid!=-1 -F path=/sbin/insmod -k modules
-a always,exit -F perm=x -F auid!=-1 -F path=/sbin/modprobe -k modules
-a always,exit -F perm=x -F auid!=-1 -F path=/sbin/rmmod -k modules
-a always,exit -F arch=b64 -S finit_module -S init_module -S delete_module -F auid!=-1 -k modules
-a always,exit -F arch=b32 -S finit_module -S init_module -S delete_module -F auid!=-1 -k modules
# Modprobe Configuration
-w /etc/modprobe.conf -p wa -k modprobe
# KExec Usage
-a always,exit -F arch=b64 -S kexec_load -k KEXEC
-a always,exit -F arch=b32 -S sys_kexec_load -k KEXEC
# Special Files
-a exit,always -F arch=b32 -S mknod -S mknodat -k specialfiles
-a exit,always -F arch=b64 -S mknod -S mknodat -k specialfiles
# Mount Operations (only attributable)
-a always,exit -F arch=b64 -S mount -S umount2 -F auid!=-1 -k mount
-a always,exit -F arch=b32 -S mount -S umount -S umount2 -F auid!=-1 -k mount
# Change Swap (only attributable)
-a always,exit -F arch=b64 -S swapon -S swapoff -F auid!=-1 -k swap
-a always,exit -F arch=b32 -S swapon -S swapoff -F auid!=-1 -k swap
# Time
-a exit,always -F arch=b32 -S adjtimex -S settimeofday -S clock_settime -k time
-a exit,always -F arch=b64 -S adjtimex -S settimeofday -S clock_settime -k time
# Local Timezone
-w /etc/localtime -p wa -k localtime
# Cron Configuration & Jobs
-w /etc/cron.allow -p wa -k cron
-w /etc/cron.deny -p wa -k cron
-w /etc/cron.d/ -p wa -k cron
-w /etc/cron.daily/ -p wa -k cron
-w /etc/cron.hourly/ -p wa -k cron
-w /etc/cron.monthly/ -p wa -k cron
-w /etc/cron.weekly/ -p wa -k cron
-w /etc/crontab -p wa -k cron
-w /var/spool/cron/ -k cron
# User, Group & Passwd Databases
-w /etc/group -p wa -k etcgroup
-w /etc/passwd -p wa -k etcpasswd
-w /etc/gshadow -k etcgroup
-w /etc/shadow -k etcpasswd
# Sudo Configuration
-w /etc/sudoers -p wa -k actions
-w /etc/sudoers.d/ -p wa -k actions
# Passwd
-w /usr/bin/passwd -p x -k passwd_modification
# User/Group Modification
-w /usr/sbin/groupadd -p x -k group_modification
-w /usr/sbin/groupmod -p x -k group_modification
-w /usr/sbin/useradd -p x -k user_modification
-w /usr/sbin/usermod -p x -k user_modification
# Login Configuration
-w /etc/login.defs -p wa -k login
-w /etc/securetty -p wa -k login
-w /var/log/lastlog -p wa -k login
-w /var/log/tallylog -p wa -k login
# Hostname Changes
-a always,exit -F arch=b32 -S sethostname -S setdomainname -k network_modifications
-a always,exit -F arch=b64 -S sethostname -S setdomainname -k network_modifications
# IPv4 Connections
-a always,exit -F arch=b64 -S connect -F a2=16 -F success=1 -F key=network_connect_4
-a always,exit -F arch=b32 -S connect -F a2=16 -F success=1 -F key=network_connect_4
# IPv6 Connections
-a always,exit -F arch=b64 -S connect -F a2=28 -F success=1 -F key=network_connect_6
-a always,exit -F arch=b32 -S connect -F a2=28 -F success=1 -F key=network_connect_6
# Network Configuration
-w /etc/hosts -p wa -k network_modifications
-w /etc/issue -p wa -k etcissue
-w /etc/issue.net -p wa -k etcissue
# Library Search Paths
-w /etc/ld.so.conf -p wa -k libpath
-w /etc/ld.so.conf.d/ -p wa -k libpath
# Pam Configuration
-w /etc/pam.d/ -p wa -k pam
-w /etc/security/limits.conf -p wa  -k pam
-w /etc/security/pam_env.conf -p wa -k pam
-w /etc/security/namespace.conf -p wa -k pam
-w /etc/security/namespace.init -p wa -k pam
# Postfix
-w /etc/aliases -p wa -k mail
-w /etc/postfix/ -p wa -k mail
# SSHD Configuration
-w /etc/ssh/ -p wa -k sshd
# Systemd
-w /bin/systemctl -p x -k systemd
-w /etc/systemd/ -p wa -k systemd
# SELinux MAC Events
-w /etc/selinux/ -p wa -k mac_policy
# Critical Access Failures
-a exit,always -F arch=b64 -S open -F dir=/etc -F success=0 -k unauthedfileaccess
-a exit,always -F arch=b64 -S open -F dir=/bin -F success=0 -k unauthedfileaccess
-a exit,always -F arch=b64 -S open -F dir=/sbin -F success=0 -k unauthedfileaccess
-a exit,always -F arch=b64 -S open -F dir=/usr/bin -F success=0 -k unauthedfileaccess
-a exit,always -F arch=b64 -S open -F dir=/usr/sbin -F success=0 -k unauthedfileaccess
-a exit,always -F arch=b64 -S open -F dir=/var -F success=0 -k unauthedfileaccess
-a exit,always -F arch=b64 -S open -F dir=/home -F success=0 -k unauthedfileaccess
-a exit,always -F arch=b64 -S open -F dir=/srv -F success=0 -k unauthedfileaccess
# Privilege Escalation
-w /usr/sbin/su -p x -k priv_esc
-w /usr/sbin/sudo -p x -k priv_esc
-w /etc/sudoers -p rw -k priv_esc
# Power State
-w /usr/sbin/halt -p x -k power
-w /usr/sbin/poweroff -p x -k power
-w /usr/sbin/reboot -p x -k power
-w /usr/sbin/shutdown -p x -k power
# Session Information
-w /var/run/utmp -p wa -k session
-w /var/log/btmp -p wa -k session
-w /var/log/wtmp -p wa -k session
# Discretionary Access Control (DAC) Modifications
#-a always,exit -F arch=b32 -S chmod -F auid>=500 -F auid!=4294967295 -k perm_mod
#-a always,exit -F arch=b32 -S chown -F auid>=500 -F auid!=4294967295 -k perm_mod
#-a always,exit -F arch=b32 -S fchmod -F auid>=500 -F auid!=4294967295 -k perm_mod
#-a always,exit -F arch=b32 -S fchmodat -F auid>=500 -F auid!=4294967295 -k perm_mod
#-a always,exit -F arch=b32 -S fchown -F auid>=500 -F auid!=4294967295 -k perm_mod
#-a always,exit -F arch=b32 -S fchownat -F auid>=500 -F auid!=4294967295 -k perm_mod
#-a always,exit -F arch=b32 -S fremovexattr -F auid>=500 -F auid!=4294967295 -k perm_mod
#-a always,exit -F arch=b32 -S fsetxattr -F auid>=500 -F auid!=4294967295 -k perm_mod
#-a always,exit -F arch=b32 -S lchown -F auid>=500 -F auid!=4294967295 -k perm_mod
#-a always,exit -F arch=b32 -S lremovexattr -F auid>=500 -F auid!=4294967295 -k perm_mod
#-a always,exit -F arch=b32 -S lsetxattr -F auid>=500 -F auid!=4294967295 -k perm_mod
#-a always,exit -F arch=b32 -S removexattr -F auid>=500 -F auid!=4294967295 -k perm_mod
#-a always,exit -F arch=b32 -S setxattr -F auid>=500 -F auid!=4294967295 -k perm_mod
#-a always,exit -F arch=b64 -S chmod  -F auid>=500 -F auid!=4294967295 -k perm_mod
#-a always,exit -F arch=b64 -S chown -F auid>=500 -F auid!=4294967295 -k perm_mod
#-a always,exit -F arch=b64 -S fchmod -F auid>=500 -F auid!=4294967295 -k perm_mod
#-a always,exit -F arch=b64 -S fchmodat -F auid>=500 -F auid!=4294967295 -k perm_mod
#-a always,exit -F arch=b64 -S fchown -F auid>=500 -F auid!=4294967295 -k perm_mod
#-a always,exit -F arch=b64 -S fchownat -F auid>=500 -F auid!=4294967295 -k perm_mod
#-a always,exit -F arch=b64 -S fremovexattr -F auid>=500 -F auid!=4294967295 -k perm_mod
#-a always,exit -F arch=b64 -S fsetxattr -F auid>=500 -F auid!=4294967295 -k perm_mod
#-a always,exit -F arch=b64 -S lchown -F auid>=500 -F auid!=4294967295 -k perm_mod
#-a always,exit -F arch=b64 -S lremovexattr -F auid>=500 -F auid!=4294967295 -k perm_mod
#-a always,exit -F arch=b64 -S lsetxattr -F auid>=500 -F auid!=4294967295 -k perm_mod
#-a always,exit -F arch=b64 -S removexattr -F auid>=500 -F auid!=4294967295 -k perm_mod
#-a always,exit -F arch=b64 -S setxattr -F auid>=500 -F auid!=4294967295 -k perm_mod
# 32-bit API Exploitation
-a always,exit -F arch=b32 -S all -k 32bit_api
# Reconnaissance
-w /usr/sbin/whoami -p x -k recon
-w /etc/issue -p r -k recon
-w /etc/issue.net -p r -k recon
-w /etc/hostname -p r -k recon
# Suspicious Activity
-w /usr/sbin/wget -p x -k susp_activity
-w /usr/sbin/curl -p x -k susp_activity
-w /usr/sbin/base64 -p x -k susp_activity
-w /usr/sbin/ss -p x -k susp_activity
-w /usr/sbin/iptables -p x -k susp_activity
-w /usr/sbin/mtr -p x -k susp_activity
-w /usr/sbin/nft -p x -k susp_activity
-w /usr/sbin/tcpdump -p x -k susp_activity
-w /usr/sbin/traceroute -p x -k susp_activity
# Ptrace Injection
-a always,exit -F arch=b32 -S ptrace -k tracing
-a always,exit -F arch=b64 -S ptrace -k tracing
-a always,exit -F arch=b32 -S ptrace -F a0=0x4 -k code_injection
-a always,exit -F arch=b64 -S ptrace -F a0=0x4 -k code_injection
-a always,exit -F arch=b32 -S ptrace -F a0=0x5 -k data_injection
-a always,exit -F arch=b64 -S ptrace -F a0=0x5 -k data_injection
-a always,exit -F arch=b32 -S ptrace -F a0=0x6 -k register_injection
-a always,exit -F arch=b64 -S ptrace -F a0=0x6 -k register_injection
# Docker
-w /usr/bin/docker -p x -k docker
-w /usr/bin/docker-init -p x -k docker
-w /usr/bin/docker-proxy -p x -k docker
-w /usr/bin/dockerd -p x -k docker
-w /etc/docker/ -p wa -k docker
-w /var/lib/docker/ -p wa -k docker
# Unauthorized Creation
-a always,exit -F arch=b32 -S creat,link,mknod,mkdir,symlink,mknodat,linkat,symlinkat -F exit=-EACCES -k file_creation
-a always,exit -F arch=b64 -S mkdir,creat,link,symlink,mknod,mknodat,linkat,symlinkat -F exit=-EACCES -k file_creation
-a always,exit -F arch=b32 -S link,mkdir,symlink,mkdirat -F exit=-EPERM -k file_creation
-a always,exit -F arch=b64 -S mkdir,link,symlink,mkdirat -F exit=-EPERM -k file_creation
# Unauthorized Modification
-a always,exit -F arch=b32 -S rename -S renameat -S truncate -S chmod -S setxattr -S lsetxattr -S removexattr -S lremovexattr -F exit=-EACCES -k file_modification
-a always,exit -F arch=b64 -S rename -S renameat -S truncate -S chmod -S setxattr -S lsetxattr -S removexattr -S lremovexattr -F exit=-EACCES -k file_modification
-a always,exit -F arch=b32 -S rename -S renameat -S truncate -S chmod -S setxattr -S lsetxattr -S removexattr -S lremovexattr -F exit=-EPERM -k file_modification
-a always,exit -F arch=b64 -S rename -S renameat -S truncate -S chmod -S setxattr -S lsetxattr -S removexattr -S lremovexattr -F exit=-EPERM -k file_modification
# }}}

# Make Configuration Immutable
-e 2
EOF
	validate "$?"

	_AA_CMD="Security: AppArmor"
	echo "write-cache" >> /mnt/etc/apparmor/parser.conf
	/usr/bin/arch-chroot /mnt systemctl enable apparmor.service >/dev/null 2>&1
	validate "$?"
fi

if [ "${AA_MACHINEROLE^^}" = "SERVER" ] || [ "${AA_MACHINEROLE^^}" = "VM" ]; then
	_AA_CMD="Security: USBGuard"
	/usr/bin/sed -i -e 's/IPCAllowedGroups=/IPCAllowedGroups=wheel/' -e 's/PresentControllerPolicy=keep/PresentControllerPolicy=apply-policy/' /mnt/etc/usbguard/usbguard-daemon.conf
	validate "$?"

	_AA_CMD="Systemd: Enable (usbguard.service)"
	/usr/bin/arch-chroot /mnt systemctl enable usbguard.service >/dev/null 2>&1
	validate "$?"
fi

_AA_CMD="Systemd: Enable (haveged.service)"
/usr/bin/arch-chroot /mnt systemctl enable haveged.service >/dev/null 2>&1
validate "$?"

printf "\\n"
# }}}
# Config: SSH Defaults {{{
desc "Config: [0mSSH Defaults"
_AA_CMD="Systemd: Enable (sshd.service)"
/usr/bin/arch-chroot /mnt systemctl enable sshd.service >/dev/null 2>&1
validate "$?"

_AA_CMD="Create: /etc/ssh/sshd_config"
/usr/bin/cat > /mnt/etc/ssh/sshd_config << EOF
# \$KYAULabs: sshd_config,v 1.0.1 2021/05/27 12:33:51 kyau Exp \$

# https://cipherlist.dev/
Port 4222
Protocol 2
HostKey /etc/ssh/ssh_host_ed25519_key
HostKey /etc/ssh/ssh_host_rsa_key
Ciphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr
KexAlgorithms curve25519-sha256@libssh.org,diffie-hellman-group-exchange-sha256
MACs hmac-sha2-512-etm@openssh.com,hmac-sha2-256-etm@openssh.com,umac-128-etm@openssh.com,hmac-sha2-512,hmac-sha2-256,umac-128@openssh.com

AllowAgentForwarding no
AllowGroups ssh
AllowTcpForwarding no
Banner /etc/ssh/sshd_banner
ChallengeResponseAuthentication no
ClientAliveCountMax 2
Compression no
LoginGraceTime 20
LogLevel VERBOSE
MaxAuthTries 3
MaxSessions 2
PasswordAuthentication no
PermitRootLogin no
PrintMotd no
PrintLastLog yes
Subsystem sftp /usr/lib/ssh/sftp-server
TCPKeepAlive no

# vim: ft=sshdconfig sts=4 sw=4 ts=4 noet:
EOF
#/usr/bin/wget ${AA_SSHD_CONFIG} -O /mnt/etc/ssh/sshd_config >/dev/null 2>&1
validate "$?"

_AA_CMD="Secure: sshd_config"
/usr/bin/chmod 0600 /mnt/etc/ssh/sshd_config
validate "$?"

_AA_CMD="Create: ~/.ssh/"
/usr/bin/mkdir -p /mnt/home/${AA_USERNAME}/.ssh/
validate "$?"

_AA_CMD="Download: ~/.ssh/authorized_keys"
/usr/bin/wget ${AA_SSH_KEY} -O /mnt/home/${AA_USERNAME}/.ssh/authorized_keys >/dev/null 2>&1
validate "$?"

_AA_CMD="Create: /etc/ssh/ssh_config"
/usr/bin/cat > /mnt/etc/ssh/ssh_config << EOF
# \$KYAULabs: ssh_config,v 1.0.1 2021/05/27 12:33:19 kyau Exp \$

# https://cipherlist.dev/
Host *
	ChallengeResponseAuthentication no
	Ciphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr
	ConnectTimeout 30
	ControlMaster auto
	ControlPath ~/.ssh/socket-%r@%h:%p
	ControlPersist yes
	HashKnownHosts yes
	KexAlgorithms curve25519-sha256@libssh.org,diffie-hellman-group-exchange-sha256
	MACs hmac-sha2-512-etm@openssh.com,hmac-sha2-256-etm@openssh.com,umac-128-etm@openssh.com,hmac-sha2-512,hmac-sha2-256,umac-128@openssh.com
	ServerAliveInterval 10

# vim: ft=sshconfig sts=4 sw=4 ts=4 noet:
EOF
#/usr/bin/wget ${AA_SSH_CONFIG} -O /mnt/home/${AA_USERNAME}/.ssh/config >/dev/null 2>&1
validate "$?"

_AA_CMD="Permissions: ~/.ssh/"
/usr/bin/arch-chroot /mnt chown -R ${AA_USERNAME}:${AA_USERNAME} /home/${AA_USERNAME}/.ssh/
/usr/bin/arch-chroot /mnt chmod -R go-rwx /home/${AA_USERNAME}/.ssh/
validate "$?"

_AA_CMD="Create: /etc/ssh/moduli"
/usr/bin/cp -f moduli /mnt/etc/ssh/moduli >/dev/null 2>&1
validate "$?"

_AA_CMD="SSH: Host Key (Ed25519)"
/usr/bin/ssh-keygen -t ed25519 -f /mnt/etc/ssh/ssh_host_ed25519_key -N "" < /dev/null >/dev/null 2>&1
validate "$?"

_AA_CMD="SSH: Host Key (RSA 4096)"
/usr/bin/ssh-keygen -t rsa -b 4096 -f /mnt/etc/ssh/ssh_host_rsa_key -N "" < /dev/null >/dev/null 2>&1
validate "$?"

_AA_CMD="Modify: /etc/nftables.conf"
/usr/bin/cat > /mnt/etc/nftables.conf << EOF
#!/usr/bin/nft -f
#
# \$KYAULabs: nftables.conf,v 1.0.3 2022/06/30 04:33:16 kyau Exp \$
# KYAU Labs - IPv4/IPv6 Firewall

flush ruleset

table inet filter {

	set blacklist {
		type ipv4_addr
		flags constant, interval
		auto-merge
		elements = {
			1.2.3.4/32
		}
	}

	set blacklist6 {
		type ipv6_addr
		flags constant, interval
		auto-merge
		elements = {
			2a01:8fe0::/32
		}
	}

	chain input {
		type filter hook input priority filter; policy drop;

		# allow from loopback
		iifname lo accept comment "+loopback"

		# early drop of invalid connections
		ct state invalid drop comment "-invalid"

		# limit ping requests (10/second)
		ip6 nexthdr icmpv6 icmpv6 type echo-request limit rate 10/second accept comment "+ping6"
		ip protocol icmp icmp type echo-request limit rate 10/second accept comment "+ping"

		# limit specific icmp types (5/second)
		meta l4proto ipv6-icmp icmpv6 type { destination-unreachable, packet-too-big, time-exceeded, parameter-problem, mld-listener-query, mld-listener-report, mld-listener-reduction, nd-router-solicit, nd-router-advert, nd-neighbor-solicit, nd-neighbor-advert, ind-neighbor-solicit, ind-neighbor-advert, mld2-listener-report } limit rate 2/second accept comment "+icmp6"
		meta l4proto icmp icmp type { destination-unreachable, router-solicitation, router-advertisement, time-exceeded, parameter-problem } limit rate 2/second accept comment "+icmp"

		# allow connections established/related by/to this machine
		ct state { established, related } accept comment "+established"

		# drop loopback connections not coming from loopback
		iifname != lo ip6 daddr ::1/128 drop comment "-invalid_loopback6"
		iifname != lo ip daddr 127.0.0.1/8 drop comment "-invalid_loopback"

		# add blacklisted ips
		ip6 saddr @blacklist6 drop comment "blacklist6"
		ip saddr @blacklist drop comment "blacklist"

		# drop all fragments
		ip frag-off & 0x1fff != 0 counter drop comment "-fragments"

		# force SYN checks
		tcp flags & (fin|syn|rst|ack) != syn ct state new counter drop comment "+syn_checks"

		# drop XMAS packets
		tcp flags & (fin|syn|rst|psh|ack|urg) == fin|syn|rst|psh|ack|urg counter drop comment "-xmas"

		# drop NULL packets
		tcp flags & (fin|syn|rst|psh|ack|urg) == 0x0 counter drop comment "-null"

		# limit ssh (15/minute)
		tcp dport 4222 limit rate 15/minute accept comment "+sshd"

		# allow http and https traffic
		# tcp dport { http, https } accept comment "+httpd"

		# allow nfs traffic
		# meta l4proto { tcp, udp } th dport 2049 ip6 saddr { fd00::/8, fe80::/10 } accept comment "+nfs6"
		# meta l4proto { tcp, udp } th dport 2049 ip saddr { 10.0.0.0/24, 10.0.10.0/24 } accept comment "+nfs"

		# allow traffic from specific ip's
		# ip saddr { 1.2.3.4, 4.3.2.1 } tcp dport 1234 ct state { established, new } counter accept comment "+service"

		# allow a range of ports
		# ip dport { 1000-2000, 3000-4000 } accept comment "+range"

		# everything else (blackhole)
		reject with icmpx type port-unreachable comment "+blackhole"
	}

	# all forwarding traffic gets dropped (we are not a router)
	chain forward {
		type filter hook forward priority filter; policy drop;
	}

	# let all traffic outbound through the firewall
	chain output {
		type filter hook output priority filter; policy drop;
		ip6 nexthdr ipv6-icmp accept
		ct state invalid drop
		ct state { established, new, related } accept
	}

}

# vim: ft=conf sts=4 sw=4 ts=4 noet:
EOF
validate "$?"

_AA_CMD="Systemd: Enable (nftables.service)"
/usr/bin/arch-chroot /mnt systemctl enable nftables.service >/dev/null 2>&1
validate "$?"

printf "\\n"
# }}}
# Post-Install: First Boot Script {{{
desc "Post-Install: [0mFirst Boot Script"
_AA_CMD="Create: /etc/systemd/system/firstboot.service"
/usr/bin/cat > /mnt/etc/systemd/system/firstboot.service << EOF
[Unit]
Description=AARCH: First Boot
Wants=nss-lookup.target
After=nss-lookup.target

[Service]
ExecStartPre=/bin/sleep 15
ExecStart=/root/firstboot
StandardOutput=append:/root/firstboot.log
StandardError=append:/root/firstboot.log

[Install]
WantedBy=multi-user.target
EOF
validate "$?"

_AA_CMD="Create: /root/firstboot"
/usr/bin/cat > /mnt/root/firstboot << EOF
#!/usr/bin/env bash
echo "-- AARCH: START --"
mandb
timedatectl set-ntp true
ln -sf /run/systemd/resolve/stub-resolv.conf /etc/resolv.conf
localectl set-locale LANG=en_US.UTF-8
usbguard generate-policy > /etc/usbguard/rules.conf
echo "-- AARCH: BOOTLOADER --"
echo -e "${AA_USERNAME} ALL=(ALL) NOPASSWD: ALL\n" > /etc/sudoers.d/temporary
EOF
if [ "${AA_MACHINETYPE^^}" = "UEFI" ]; then
	/usr/bin/cat >> /mnt/root/firstboot <<EOF
mount -o remount,rw /boot
mkdir -p /boot/EFI/tools
curl -L https://github.com/tianocore/edk2/releases/download/edk2-stable202002/ShellBinPkg.zip -o ShellBinPkg.zip > /dev/null 2>&1
7z x ShellBinPkg.zip && cp ShellBinPkg/UefiShell/X64/Shell.efi /boot/EFI/tools/shellx64.efi && rm -rf /root/ShellBinPkg*
echo -e "title\tUEFI Shell x86_64 v2\nefi\t/EFI/tools/shellx64.efi" | tee /boot/loader/entries/uefi-shell.conf
EOF
fi
if [ "${AA_XORG}" -eq "0" ]; then
	echo "systemctl set-default multi-user.target" >> /mnt/root/firstboot
else
	echo "systemctl set-default graphical.target" >> /mnt/root/firstboot
fi
if [ "${AA_MACHINEROLE^^}" = "VM" ] || [ "${AA_MACHINEROLE^^}" = "SERVER" ]; then
	/usr/bin/cat >> /mnt/root/firstboot <<EOF
runuser -l "${AA_USERNAME}" -c "mkdir -m700 -p ~/.gnupg/ && echo 'standard-resolver' > ~/.gnupg/dirmngr.conf"
sleep 5
# gpg key for acct maintainer
runuser -l "${AA_USERNAME}" -c "gpg --recv-key B73CBC7708FA8C10"
# gpg key for aide maintainer
runuser -l "${AA_USERNAME}" -c "gpg --recv-key 18EE86386022EF57"
runuser -l "${AA_USERNAME}" -c "${AA_PKGMAN} -S acct --noedit --nodiff --noconfirm > /dev/null 2>&1"
#runuser -l "${AA_USERNAME}" -c "${AA_PKGMAN} -S addrwatch aide lynis --noedit --nodiff --noconfirm" >/dev/null 2>&1
runuser -l "${AA_USERNAME}" -c "${AA_PKGMAN} -S addrwatch --noedit --nodiff --noconfirm"
runuser -l "${AA_USERNAME}" -c "${AA_PKGMAN} -S aide --noedit --nodiff --noconfirm"
runuser -l "${AA_USERNAME}" -c "${AA_PKGMAN} -S lynis --noedit --nodiff --noconfirm"
systemctl --now enable acct.service
EOF
fi
if [ "${AA_MACHINEROLE^^}" = "VM" ]; then
	/usr/bin/cat >> /mnt/root/firstboot <<EOF
systemctl enable --now serial-getty@ttyS0.service
EOF
fi
if [ ! "${AA_MACHINEROLE^^}" = "VM" ]; then
	/usr/bin/cat >> /mnt/root/firstboot << EOF
sensors-detect --auto
runuser -l "${AA_USERNAME}" -c "${AA_PKGMAN} -S memtest86-efi --noedit --nodiff --noconfirm > /dev/null 2>&1" && cp /usr/share/memtest86-efi/bootx64.efi /boot/EFI/tools/memtest86.efi
runuser -l "${AA_USERNAME}" -c "${AA_PKGMAN} -Rs memtest86-efi --noconfirm > /dev/null 2>&1"
echo -e "title\tMemtest86\nefi\t/EFI/tools/memtest86.efi" | tee /boot/loader/entries/memtest86.conf
EOF
fi
if [ -f /root/firstboot.txt ]; then
	# export all variables used in firstboot.txt
	export AA_MACHINEROLE
	export AA_USERNAME
	export AA_PKGMAN
	export AA_XORG
	# import firstboot.txt and substitute needed variables
	# shellcheck disable=SC2016
	envsubst '${AA_MACHINEROLE} ${AA_USERNAME} ${AA_PKGMAN} ${AA_XORG}' < /root/firstboot.txt > /root/__aa__firstboot.txt
	mapfile -t lines <"/root/__aa__firstboot.txt"
	for line in "${lines[@]}"; do
		if [ "${line:0:1}" = "#" ] || [ -z "${line}" ]; then continue; fi
		echo "${line}" >> /mnt/root/firstboot
	done
	rm -f /root/__aa__firstboot.txt
fi
if [ -n "${AA_TFAN_CONFIG}" ]; then
	echo "pacman -Rs boost cmake" >> /mnt/root/firstboot
fi
if [ "${AA_MACHINEROLE^^}" = "VM" ] || [ "${AA_MACHINEROLE^^}" = "SERVER" ]; then
	/usr/bin/cat >> /mnt/root/firstboot << EOF
runuser -l "${AA_USERNAME}" -c "${AA_PKGMAN} -Rs linux --noconfirm"
echo -e "skip-upgrade-test=yes\nskip-test=KRNL-5830\nskip-test=ACCT-9626\nskip-test=AUTH-9230\nskip-test=AUTH-9408\nskip-test=NETW-2705\nskip-test=FIRE-4512\nskip-test=BANN-7126\nskip-test=BANN-7130\nskip-test=KRNL-6000:kernel.modules_disabled" >> /etc/lynis/custom.prf
EOF
fi
/usr/bin/cat >> /mnt/root/firstboot << EOF

sed -i -e 's/After=systemd-network-wait-online.service/After=network.target network-online.target/' -e 's/Wants=systemd-network-wait-online.service/Wants=network-online.target/' -e 's/addrwatch -q/addrwatch -P -q/' /usr/lib/systemd/system/addrwatch@.service
aide --init
mv /var/lib/aide/aide.db.new.gz /var/lib/aide/aide.db.gz
rm -f /etc/sudoers.d/temporary
rm -f /root/firstboot
echo "-- AARCH: SECURITY --"
rkhunter --propupd
echo "-- AARCH: END --"
systemctl disable firstboot.service
systemctl daemon-reload
rm -f /etc/systemd/system/firstboot.service
EOF
if [ "${AA_MACHINEROLE^^}" = "VM" ] || [ "${AA_MACHINEROLE^^}" = "SERVER" ]; then
	/usr/bin/cat >> /mnt/root/firstboot << EOF
systemctl enable addrwatch@eth0.service
EOF
fi
validate "$?"

_AA_CMD="Permissions: /root/firstboot"
/usr/bin/chmod 755 /mnt/root/firstboot
validate "$?"

_AA_CMD="Systemd: Enable (firstboot.service)"
/usr/bin/arch-chroot /mnt systemctl enable firstboot >/dev/null 2>&1
validate "$?"

printf "\\n\\n"
# }}}
printf "\\t\\x1b[38;5;235m#\\x1b[0;31m sync; umount -R /mnt\\n\\n"
printf "\\x1b[1;30mEject installation medium and reboot\\x1b[0m\\n\\n"

# vim: ft=sh sts=4 sw=4 ts=4 noet:
