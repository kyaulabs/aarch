#!/bin/bash

# $Arch: autoarch,v 1.035 2018/11/12 21:03:27 kyau Exp $

set -eu
IFS=$'\n\t'

# ANSI Output {{{
function print_logo() {
	printf "             \e[0;36m.\\n"
	printf "            \e[0;36m/ \ \\n"
	printf "           \e[0;36m/   \ \\n"
	printf "          \e[0;36m/^.   \      \\x1b[38;5;252mAutomated Arch\\x1b[38;5;32mLinux\\n"
	printf "         \e[0;36m/  .-.  \     \\x1b[38;5;8mKYAU Labs Edition\\n"
	printf "        \e[0;36m/  (   ) _\ \\n"
	printf "       \e[1;36m/ _.~   ~._^\ \\n"
	printf "      \e[1;36m/.^         ^.\ \\n"
}
function desc() {
	>&2 printf "\\x1b[38;5;32m\\u25ab\\u25aa \\x1b[38;5;252m%s\\x1b[0m " "${1}"
}
function validate() {
	# if failure else success
	if [[ "$1" -ne 0 ]]; then
		>&2 printf "\\x1b[31m\\u203c\\x1b[0m\\n"
		exit 1
	else
		>&2 printf "\\x1b[1;32m\\u2713\\x1b[0m\\n"
	fi
}
# }}}
# Variables: Load {{{
if [ ! -f moduli ]; then
	printf "\\x1b[38;5;124m‼ Missing non elliptic-curve primes (moduli)\\n"
	printf "\\t\\x1b[38;5;235m#\\x1b[38;5;244m ssh-keygen -G moduli.all -b 2048\\n"
	printf "\\t\\x1b[38;5;235m#\\x1b[38;5;244m ssh-keygen -T moduli -f moduli.all\\n"
	printf "\\t\\x1b[38;5;235m#\\x1b[38;5;244m rm moduli.all\\n\\n"
	exit 1
fi

if [ -f *.aa ]; then
	source *.aa
fi
# Installation Disk
if [ -z ${AA_DISK+x} ]; then
	printf "Disk to use for install [/dev/sda]: "
	read AA_DISK
	if [ -z "$AA_DISK" ]; then
		AA_DISK="/dev/sda"
	fi
fi
# Hostname
if [ -z ${AA_HOSTNAME+x} ]; then
	printf "Hostname [arch.local]: "
	read AA_HOSTNAME
	if [ -z "$AA_HOSTNAME" ]; then
		AA_HOSTNAME="arch.local"
	fi
	AA_HOST=${AA_HOSTNAME%%.*}
else
	AA_HOST=${AA_HOSTNAME%%.*}
fi
# Swap
if [ -z ${AA_SWAP+x} ]; then
	printf "Swap Size (in GB) [4]: "
	read AA_SWAP
	if [ -z "$AA_SWAP" ]; then
		AA_SWAP="4"
	fi
fi
# Root Password
if [ -z ${AA_PASSWD+x} ]; then
	printf "Root/User password [moo]: "
	read AA_PASSWD
	if [ -z "$AA_PASSWD" ]; then
		AA_PASSWD="moo"
	fi
fi
# Username
if [ -z ${AA_USERNAME+x} ]; then
	printf "Username (kyau): "
	read AA_USERNAME
	if [ -z "$AA_USERNAME" ]; then
		AA_USERNAME="kyau"
	fi
fi
# IP Address
if [ -z ${AA_IPADDR+x} ]; then
	printf "IP Address [10.0.42.40]: "
	read AA_IPADDR
	if [ -z "$AA_IPADDR" ]; then
		AA_IPADDR="10.0.42.40"
	fi
fi
# Gateway
if [ -z ${AA_GATEWAY+x} ]; then
	printf "Gateway [10.0.42.1]: "
	read AA_GATEWAY
	if [ -z "$AA_GATEWAY" ]; then
		AA_GATEWAY="10.0.42.1"
	fi
fi
# DNS
if [ -z ${AA_DNS+x} ]; then
	printf "DNS [1.1.1.1]: "
	read AA_DNS
	if [ -z "$AA_DNS" ]; then
		AA_DNS="1.1.1.1"
	fi
fi
# Timezone
if [ -z ${AA_TIMEZONE+x} ]; then
	printf "Timezone [America/Los_Angeles]: "
	read AA_TIMEZONE
	if [ -z "$AA_TIMEZONE" ]; then
		AA_TIMEZONE="America/Los_Angeles"
	fi
fi
# SSHD Config
if [ -z ${AA_SSHD_CONFIG+x} ]; then
	printf "Remote SSHD Config [https://gitlab.com/kyaulabs/autoarch/raw/master/etc/sshd_config]: "
	read AA_SSHD_CONFIG
	if [ -z "$AA_SSHD_CONFIG" ]; then
		AA_SSHD_CONFIG="https://gitlab.com/kyaulabs/autoarch/raw/master/etc/sshd_config"
	fi
fi
# SSH Config
if [ -z ${AA_SSH_CONFIG+x} ]; then
	printf "Remote SSH Config [https://gitlab.com/kyaulabs/autoarch/raw/master/etc/ssh_config]: "
	read AA_SSH_CONFIG
	if [ -z "$AA_SSH_CONFIG" ]; then
		AA_SSH_CONFIG="https://gitlab.com/kyaulabs/autoarch/raw/master/etc/ssh_config"
	fi
fi
# SSH Key
if [ -z ${AA_SSH_KEY+x} ]; then
	printf "Remote SSH Key [https://raw.githubusercontent.com/kyau/dotfiles/master/ssh/authorized_keys]: "
	read AA_SSH_KEY
	if [ -z "$AA_SSH_KEY" ]; then
		AA_SSH_KEY="https://raw.githubusercontent.com/kyau/dotfiles/master/ssh/authorized_keys"
	fi
fi
# }}}
# Variables: Summary {{{
print_logo
p_sshd=${AA_SSHD_CONFIG##*/}
p_ssh=${AA_SSH_CONFIG##*/}
p_sshkey=${AA_SSH_KEY##*/}
p_passwd=$(head -c ${#AA_PASSWD} < /dev/zero | tr '\0' '•')
printf " \\x1b[38;5;255m┌\\x1b[38;5;242m────\\x1b[38;5;235m─·\\x1b[38;5;242m─\x1b[38;5;235m─·─────────────────────────────────────────────────┐\\n"
printf " \\x1b[38;5;242m│\\x1b[38;5;237m░\\x1b[0m   \\x1b[38;5;244mDisk: \\x1b[38;5;240m%-10s  \\x1b[38;5;244mSwap: \\x1b[38;5;240m%-2sGB %-21s \\x1b[38;5;237m░░░·\\x1b[0m\\n" "${AA_DISK}" "${AA_SWAP}" " "
printf " \\x1b[38;5;242m│\\x1b[38;5;237m░\\x1b[0m   \\x1b[38;5;244mHost: \\x1b[38;5;240m%-10s  \\x1b[38;5;244mHostname: \\x1b[38;5;240m%-24s\\x1b[0m \\x1b[38;5;237m░\\x1b[38;5;242m:\\x1b[0m\\n" "${AA_HOST}" "${AA_HOSTNAME}"
printf " \\x1b[38;5;242m│\\x1b[38;5;237m░\\x1b[0m   \\x1b[38;5;244mUsername: \\x1b[38;5;240m%-42s \\x1b[38;5;237m░\\x1b[38;5;242m│\\x1b[0m\\n" "${AA_USERNAME}"
printf " \\x1b[38;5;242m│\\x1b[38;5;237m░\\x1b[0m   \\x1b[38;5;244mPassword: \\x1b[38;5;240m%-42s \\x1b[38;5;237m░\\x1b[38;5;242m│\\x1b[0m\\n" "${p_passwd}"
printf " \\x1b[38;5;242m│\\x1b[38;5;237m░\\x1b[0m   \\x1b[38;5;244mIP Address: \\x1b[38;5;240m%-15s \\x1b[38;5;244mGateway: \\x1b[38;5;240m%-15s \\x1b[38;5;237m░\\x1b[38;5;242m│\\x1b[0m\\n" "${AA_IPADDR}" "${AA_GATEWAY}"
printf " \\x1b[38;5;242m│\\x1b[38;5;237m░\\x1b[0m   \\x1b[38;5;244mDNS: \\x1b[38;5;240m%-47s \\x1b[38;5;237m░\\x1b[38;5;242m│\\x1b[0m\\n" "${AA_DNS}"
printf " \\x1b[38;5;242m│\\x1b[38;5;237m░\\x1b[0m   \\x1b[38;5;244mTimezone: \\x1b[38;5;240m%-42s \\x1b[38;5;237m░\\x1b[38;5;242m│\\x1b[0m\\n" "${AA_TIMEZONE}"
printf " \\x1b[38;5;242m│\\x1b[38;5;237m░\\x1b[0m   \\x1b[38;5;244mSSHD Config: \\x1b[38;5;240m%-39s \\x1b[38;5;237m░\\x1b[38;5;242m│\\x1b[0m\\n" "${p_sshd}"
printf " \\x1b[38;5;235m·\\x1b[38;5;237m░\\x1b[0m   \\x1b[38;5;244mSSH Config: \\x1b[38;5;240m%-40s \\x1b[38;5;237m░\\x1b[38;5;242m│\\x1b[0m\\n" "${p_ssh}"
printf " \\x1b[38;5;235m│\\x1b[38;5;237m░░░ \\x1b[38;5;244mSSH Key: \\x1b[38;5;240m%-43s \\x1b[38;5;237m░\\x1b[38;5;242m│\\x1b[0m\\n" "${p_sshkey}"
printf " \\x1b[38;5;235m└─────────────────────────────────────────────·─\\x1b[38;5;242m─\\x1b[1;39m·─\\x1b[38;5;242m─\\x1b[1;39m─\\x1b[38;5;242m──────\\x1b[38;5;255m┘\\x1b[0m\\n"
# }}}
# Prerequisites {{{
echo -e
desc "Internet Status"
/usr/bin/wget -q --tries=10 --timeout=20 --spider http://www.archlinux.org >/dev/null 2>&1
validate "$?"
# }}}
# Prerequisites: Disk {{{
if /usr/bin/mount | /usr/bin/grep /mnt > /dev/null; then
	desc "${AA_DISK}: Unmount All"
	/usr/bin/umount -R /mnt >/dev/null 2>&1
	validate "$?"
fi

desc "${AA_DISK}: Erase (block-level wipe)"
/usr/bin/dd if=/dev/zero of=${AA_DISK} bs=1k count=2048 >/dev/null 2>&1
validate "$?"

desc "${AA_DISK}: Erase (filesystem signature)"
/usr/bin/wipefs -af "${AA_DISK}" >/dev/null 2>&1
validate "$?"

desc "${AA_DISK}: Erase (MBR/GPT data structs)"
/usr/bin/sgdisk -Z -o ${AA_DISK} >/dev/null 2>&1
validate "$?"

desc "${AA_DISK}: Partition"
/usr/bin/sgdisk -n 1:0:-256M -n 2:-256M:-0 -t 1:8300 -t 2:ef00 ${AA_DISK} >/dev/null 2>&1
validate "$?"

desc "${AA_DISK}: Labels"
/usr/bin/sgdisk -c 1:"LVM2" -c 2:"UEFI" ${AA_DISK} >/dev/null 2>&1
validate "$?"
# }}}
# Prerequisites: LVM {{{
desc "LVM: Clear Metadata"
/usr/bin/dmsetup remove_all >/dev/null 2>&1
/usr/bin/pvremove -y -ff ${AA_DISK}* >/dev/null 2>&1
validate "$?"

desc "LVM: Initialize Physical Volume"
/usr/bin/pvcreate --yes ${AA_DISK}1 >/dev/null 2>&1
validate "$?"

desc "LVM: Create Volume Group"
/usr/bin/vgcreate --yes ${AA_HOST} ${AA_DISK}1 >/dev/null 2>&1
validate "$?"

desc "LVM: Create Logical Volume (${AA_HOST}-swap)"
/usr/bin/lvcreate -L ${AA_SWAP}G ${AA_HOST} --name swap >/dev/null 2>&1
validate "$?"

desc "LVM: Create Logical Volume (${AA_HOST}-root)"
/usr/bin/lvcreate  --yes -l +100%FREE ${AA_HOST} --name root >/dev/null 2>&1
validate "$?"
# }}}
# Prerequisites: Filesystems {{{
desc "Format: Ext4 (${AA_HOST}-root)"
/usr/bin/mkfs.ext4 -O metadata_csum /dev/mapper/${AA_HOST}-root >/dev/null 2>&1
validate "$?"

desc "Format: FAT32 (${AA_DISK}2)"
/usr/bin/mkfs.fat -F32 ${AA_DISK}2 >/dev/null 2>&1
validate "$?"

desc "Swap: Create"
/usr/bin/mkswap /dev/mapper/${AA_HOST}-swap >/dev/null 2>&1
validate "$?"

desc "Swap: Enable"
/usr/bin/swapon /dev/mapper/${AA_HOST}-swap >/dev/null 2>&1
validate "$?"

desc "Mount: $(echo ${AA_HOST} | awk '{print toupper($0)}') => /mnt"
/usr/bin/mount /dev/mapper/${AA_HOST}-root /mnt >/dev/null 2>&1
validate "$?"

desc "Create: /boot"
/usr/bin/mkdir /mnt/boot >/dev/null 2>&1
validate "$?"

desc "Mount: UEFI => /mnt/boot"
/usr/bin/mount ${AA_DISK}2 /mnt/boot >/dev/null 2>&1
validate "$?"
# }}}
# Install: Pacstrap {{{
desc "Install: Packages"
/usr/bin/pacstrap /mnt base base-devel efibootmgr gdisk git intel-ucode lvm2 nftables openssh pacman-contrib pyalpm refind-efi reflector sudo vim >/dev/null 2>&1
validate "$?"

desc "Generate: /etc/fstab"
/usr/bin/genfstab -pU /mnt >> /mnt/etc/fstab
validate "$?"

desc "Modify: /etc/fstab"
/usr/bin/sed -i 's/rw,relatime\t/rw,relatime,journal_checksum\t/' /mnt/etc/fstab >/dev/null 2>&1
validate "$?"
# }}}
# Install: Configuration {{{
desc "Modify: Superuser Password"
/usr/bin/arch-chroot /mnt chpasswd <<< "root:${AA_PASSWD}" >/dev/null 2>&1
validate "$?"

desc "Modify: /etc/mkinitcpio.conf"
/usr/bin/sed -i -e 's/^MODULES=()/MODULES=(acpi_ipmi crc32_generic crc32c-intel fuse lz4 lz4_compress)/' -e 's/udev autodetect modconf block filesystems keyboard/systemd keyboard autodetect block sd-lvm2 filesystems/' /mnt/etc/mkinitcpio.conf >/dev/null 2>&1
validate "$?"

desc "Config: Initial Ramdisk Environment"
/usr/bin/arch-chroot /mnt mkinitcpio -p linux >/dev/null 2>&1
validate "$?"

desc "Create: User Account"
/usr/bin/arch-chroot /mnt useradd -m -G wheel,systemd-journal -s /bin/bash ${AA_USERNAME}
validate "$?"

desc "Modify: User Password"
/usr/bin/arch-chroot /mnt chpasswd <<< "${AA_USERNAME}:${AA_PASSWD}" >/dev/null 2>&1
validate "$?"

desc "Modify: Root \$EDITOR"
echo -e "EDITOR=/usr/bin/rvim\nSUDO_EDITOR=/usr/bin/rvim" >> /mnt/root/.bashrc >/dev/null 2>&1
validate "$?"

desc "Permissions: /bin/su"
/usr/bin/sed -i 's/^#auth\t\trequired\tpam_wheel.so use_uid/auth\t\trequired\tpam_wheel.so use_uid/' /mnt/etc/pam.d/su >/dev/null 2>&1
/usr/bin/sed -i 's/^#auth\t\trequired\tpam_wheel.so use_uid/auth\t\trequired\tpam_wheel.so use_uid/' /mnt/etc/pam.d/su-l >/dev/null 2>&1
validate "$?"

desc "Permissions: /boot, /root, /home/${AA_USERNAME}"
/usr/bin/arch-chroot /mnt chmod -R go-rwx /root /home/kyau /boot
validate "$?"

desc "Install: Refind"
/usr/bin/arch-chroot /mnt refind-install --usedefault ${AA_DISK}2 --alldrivers >/dev/null 2>&1
validate "$?"

desc "Modify: /boot/EFI/BOOT/refind.conf"
UUID=$(blkid -s PARTUUID -o value ${AA_DISK}2)
/usr/bin/cat > /mnt/boot/EFI/BOOT/refind.conf <<EOF
timeout 10
scan_driver_dirs EFI/BOOT/drivers_x64,EFI/BOOT/drivers
dont_scan_dirs EFI/Dell
scan_all_linux_kernels false
menuentry "Arch Linux" {
    icon /EFI/BOOT/icons/os_arch.png
    volume ${UUID}
    loader /vmlinuz-linux
    initrd /initramfs-linux.img
    options "root=/dev/mapper/${AA_HOST}-root rw add_efi_memmap nomodeset zswap.enabled=1 zswap.compressor=lz4 zswap.max_pool_percent=20 zswap.zpool=z3fold initrd=\intel-ucode.img"
    submenuentry "Boot using fallback initramfs" {
        initrd /initramfs-linux-fallback.img
    }
}
EOF
validate "$?"

desc "Permissions: /tmp"
echo -e "tmpfs\t/tmp\ttmpfs\trw,nosuid,nodev,noatime,mode=1777\t0\t0" >> /mnt/etc/fstab 
validate "$?"

desc "Permissions: /proc"
echo -e "proc\t/proc\tproc\tnosuid,nodev,noexec,hidepid=2,gid=wheel\t0\t0" >> /mnt/etc/fstab
validate "$?"

desc "Security: Kernel Runtime Parameters"
/usr/bin/cat > /mnt/etc/sysctl.d/50-security.conf << EOF
net.ipv4.conf.all.secure_redirects=0
net.ipv4.conf.default.secure_redirects=0
net.ipv4.conf.default.send_redirects=0
net.ipv4.conf.all.send_redirects=0
net.ipv4.tcp_syncookies=1
net.ipv4.tcp_rfc1337=1
kernel.dmesg_restrict=1
kernel.kptr_restrict=1
EOF
validate "$?"

desc "Modify: Oldschool NIC Names"
/usr/bin/ln -sf /dev/null /mnt/etc/udev/rules.d/80-net-setup-link.rules
validate "$?"

desc "Config: eth0"
echo -e "[Match]\nName=eth0\n\n[Network]\nAddress=${AA_IPADDR}/24\nGateway=${AA_GATEWAY}" > /mnt/etc/systemd/network/eth0.network
validate "$?"

desc "Modify: /etc/pacman.conf"
/usr/bin/sed -i 's/#Color/Color/' /mnt/etc/pacman.conf >/dev/null 2>&1
validate "$?"

desc "Modify: /etc/hostname"
echo -e "${AA_HOSTNAME}" > /mnt/etc/hostname
validate "$?"

desc "Modify: /etc/hosts"
echo -e "127.0.0.1\t${AA_HOST}.localdomain\t${AA_HOST}" >> /mnt/etc/hosts
validate "$?"

desc "Modify: /etc/resolv.conf"
echo -e "${AA_DNS}" >> /mnt/etc/resolv.conf
validate "$?"

desc "Symlink: /etc/localtime"
/usr/bin/arch-chroot /mnt ln -sf /usr/share/zoneinfo/${AA_TIMEZONE} /etc/localtime
validate "$?"

desc "Sync: Clock"
/usr/bin/arch-chroot /mnt hwclock --systohc
validate "$?"

desc "Modify: /etc/locale.gen"
/usr/bin/sed -i 's/^#en_US\.UTF/en_US\.UTF/' /mnt/etc/locale.gen >/dev/null 2>&1
validate "$?"

desc "Generate: Locale"
/usr/bin/arch-chroot /mnt locale-gen >/dev/null 2>&1
validate "$?"

desc "Modify: /etc/locale.conf"
echo "LANG=en_US.UTF-8" > /mnt/etc/locale.conf
validate "$?"

desc "Modify: /etc/pacman.d/mirrorlist"
/usr/bin/arch-chroot /mnt reflector --latest 100 --protocol https --sort rate --save /etc/pacman.d/mirrorlist
validate "$?"

desc "Download: AUR Helper (pikaur)"
/usr/bin/arch-chroot /mnt runuser -l ${AA_USERNAME} -c 'git clone https://aur.archlinux.org/pikaur.git' >/dev/null 2>&1
validate "$?"

desc "Compile: AUR Helper (pikaur)"
/usr/bin/arch-chroot /mnt runuser -l ${AA_USERNAME} -c 'cd pikaur && makepkg -fsr --noconfirm' >/dev/null 2>&1
validate "$?"

desc "Install: AUR Helper (pikaur)"
T_PIKAUR=$(/usr/bin/arch-chroot /mnt ls /home/${AA_USERNAME}/pikaur/ | /usr/bin/grep .tar.xz)
/usr/bin/arch-chroot /mnt pacman -U /home/${AA_USERNAME}/pikaur/${T_PIKAUR} --noconfirm >/dev/null 2>&1
validate "$?"

desc "Remove: AUR Helper Source"
/usr/bin/arch-chroot /mnt runuser -l ${AA_USERNAME} -c 'rm -rf pikaur'
validate "$?"

desc "Modify: /etc/makepkg.conf"
/usr/bin/sed -i 's/^#BUILDDIR/BUILDDIR/' /mnt/etc/makepkg.conf
validate "$?"

desc "Systemd: Keep Boot Mesages"
/usr/bin/mkdir -p /mnt/etc/systemd/system/getty@tty1.service.d
/usr/bin/cat > /mnt/etc/systemd/system/getty@tty1.service.d/noclear.conf << EOF
[Service]
TTYVTDisallocate=no
EOF
validate "$?"

desc "Systemd: Turn Numlock On"
/usr/bin/mkdir -p /mnt/etc/systemd/system/getty@.service.d
/usr/bin/cat > /mnt/etc/systemd/system/getty@.service.d/numlock.conf << EOF
[Service]
ExecStartPre=/bin/sh -c 'setleds -D +num < /dev/%I'
EOF
validate "$?"

desc "Modify: /etc/systemd/timesyncd.conf"
/usr/bin/cat >> /mnt/etc/systemd/timesyncd.conf << EOF
NTP=0.arch.pool.ntp.org 1.arch.pool.ntp.org 2.arch.pool.ntp.org 3.arch.pool.ntp.org
FallbackNTP=0.pool.ntp.org 1.pool.ntp.org 0.us.pool.ntp.org
EOF
validate "$?"

desc "Systemd: Enable (systemd-networkd.service)"
/usr/bin/arch-chroot /mnt systemctl enable systemd-networkd.service >/dev/null 2>&1
validate "$?"

desc "Systemd: Enable (systemd-timesyncd.service)"
/usr/bin/arch-chroot /mnt systemctl enable systemd-timesyncd.service >/dev/null 2>&1
validate "$?"

desc "Systemd: Enable (sshd.socket)"
/usr/bin/arch-chroot /mnt systemctl enable sshd.socket >/dev/null 2>&1
validate "$?"
# }}}
# Install: Security {{{
desc "Download: /etc/ssh/sshd_config"
/usr/bin/wget ${AA_SSHD_CONFIG} -O /mnt/etc/ssh/sshd_config >/dev/null 2>&1
validate "$?"

desc "Create: ~/.ssh/"
/usr/bin/mkdir -p /mnt/home/${AA_USERNAME}/.ssh/
validate "$?"

desc "Download: ~/.ssh/authorized_keys"
/usr/bin/wget ${AA_SSH_KEY} -O /mnt/home/${AA_USERNAME}/.ssh/authorized_keys >/dev/null 2>&1
validate "$?"

desc "Download: ~/.ssh/config"
/usr/bin/wget ${AA_SSH_CONFIG} -O /mnt/home/${AA_USERNAME}/.ssh/config >/dev/null 2>&1
validate "$?"

desc "Permissions: ~/.ssh/"
/usr/bin/arch-chroot /mnt chown -R ${AA_USERNAME}:${AA_USERNAME} /home/${AA_USERNAME}/.ssh/
/usr/bin/arch-chroot /mnt chmod -R go-rwx /home/${AA_USERNAME}/.ssh/
validate "$?"

desc "Create: /etc/ssh/moduli"
/usr/bin/cp -f moduli /mnt/etc/ssh/moduli >/dev/null 2>&1
validate "$?"

desc "SSH: Host Key (Ed25519)"
/usr/bin/ssh-keygen -t ed25519 -f /mnt/etc/ssh/ssh_host_ed25519_key -N "" < /dev/null >/dev/null 2>&1
validate "$?"

desc "SSH: Host Key (RSA 4096)"
/usr/bin/ssh-keygen -t rsa -b 4096 -f /mnt/etc/ssh/ssh_host_rsa_key -N "" < /dev/null >/dev/null 2>&1
validate "$?"

desc "Groupadd: ssh"
/usr/bin/arch-chroot /mnt groupadd ssh
/usr/bin/arch-chroot /mnt gpasswd -a ${AA_USERNAME} ssh >/dev/null 2>&1
validate "$?"

desc "Modify: /etc/nftables.conf"
/usr/bin/cat > /mnt/etc/nftables.conf << EOF
#!/usr/bin/nft -f
#
# KYAU Labs - IPv4/IPv6 Firewall

table inet filter {

  chain input {
    type filter hook input priority 0;

    # allow established/related connections
    ct state {established, related} accept

    # early drop of invalid connections
    ct state invalid drop

    # allow from loopback
    iifname lo accept

    # no ping floods
    ip6 nexthdr icmpv6 icmpv6 type echo-request limit rate 10/second accept
    ip protocol icmp icmp type echo-request limit rate 10/second accept

    # allow ssh, but with brute force protection
    tcp dport ssh limit rate 15/minute accept

    # allow http and https traffic
    #tcp dport {http,https} accept

    # everything else (blackhole)
    reject with icmp type port-unreachable
  }

  # all forwarding traffic gets dropped (we are not a router)
  chain forward {
    type filter hook forward priority 0;
    drop
  }

  # let all traffic outbound through the firewall
  chain output {
    type filter hook output priority 0;
    accept
  }

}
EOF
validate "$?"

desc "Systemd: Enable (nftables.service)"
/usr/bin/arch-chroot /mnt systemctl enable nftables.service >/dev/null 2>&1
validate "$?"

desc "Create: /etc/sudoers.d/kyaulabs"
/usr/bin/cat > /mnt/etc/sudoers.d/kyaulabs << EOF
Defaults editor=/usr/bin/rvim
Defaults env_keep += "SSH_AUTH_SOCK"
%wheel ALL=(ALL) ALL
ALL ALL=(ALL) /usr/sbin/checkupdates
EOF
validate "$?"
# }}}
# Post-Install {{{
desc "Create: /etc/systemd/system/firstboot.service"
/usr/bin/cat > /mnt/etc/systemd/system/firstboot.service << EOF
[Unit]
Description=First Boot

[Service]
ExecStart=/root/firstboot

[Install]
WantedBy=multi-user.target
EOF
validate "$?"

desc "Create: /root/firstboot"
/usr/bin/cat > /mnt/root/firstboot << EOF
#!/bin/sh
timedatectl set-ntp true
localectl set-locale LANG=en_US.UTF-8
systemctl disable firstboot.service
rm /etc/systemd/system/firstboot.service
rm /root/firstboot
EOF
validate "$?"

desc "Permissions: /root/firstboot"
/usr/bin/chmod 755 /root/firstboot
validate "$?"

desc "Systemd: Enable (firstboot.service)"
/usr/bin/arch-chroot /mnt systemctl enable firstboot
validate "$?"

printf "\\t\\x1b[38;5;235m#\\x1b[38;5;244m umount -R /mnt\\n"
printf "\\t\\x1b[38;5;235m#\\x1b[38;5;244m systemctl reboot\\n\\n"
# }}}

# vim: ft=sh ts=4 sw=4 noet:
